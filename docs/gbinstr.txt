nn Mnemonic	   Symbolic Operation							CB Mnemnonic	Symbolic Operation
----------------------------------------------------------------------------------------------------------------------------------------------------
00 NOP             skip									RLC	B
01 LD   BC,&0000   BC <- nn								RLC	C
02 LD   (BC),A     (BC) <- A								RLC	D
03 INC  BC         BC <- BC+1								RLC	E
04 INC  B          B <- B+1 								RLC	H
05 DEC  B          B <- B-1								RLC	L
06 LD   B,&00      B <- n								RLC	(HL)
07 RLCA            rotate akku left.							RLC	A
08 LD	(&0000),SP nn <- SP 								RRC 	B
09 ADD  HL,BC      HL <- HL+BC								RRC 	C
0A LD   A,(BC)     A <- (BC)								RRC 	D
0B DEC  BC         BC <- BC-1								RRC 	E
0C INC  C          C <- C+1								RRC 	H
0D DEC  C          C <- C-1								RRC 	L
0E LD   C,&00      C <- n								RRC 	(HL)
0F RRCA            rotate akku right.							RRC 	A
10 STOP		   Halt CPU.								RL 	B	
11 LD   DE,&0000   DE <- nn								RL 	C	
12 LD   (DE),A     (DE) <- A								RL 	D
13 INC  DE         DE <- DE+1								RL 	E
14 INC  D          D <- D+1								RL 	H
15 DEC  D          D <- D-1								RL 	L
16 LD   D,&00      D <- n								RL 	(HL)
17 RLA             rotate akku left through carry.					RL 	A
18 JR   &4546      PC <- PC+nn								RR 	B
19 ADD  HL,DE      HL <- HL+DE								RR 	C
1A LD   A,(DE)     A <- (DE)								RR 	D
1B DEC  DE         DE <- DE-1								RR 	E
1C INC  E          E <- E+1								RR 	H
1D DEC  E          E <- E-1								RR 	L
1E LD   E,&00      E <- n								RR 	(HL)
1F RRA             rotate akku right through carry					RR 	A
20 JR   NZ,&4546   if NZ -> PC <- PC+nn else continue					SLA	B	F(4) <- B(7); B(0) <- 0; B(n) <- B(n-1); 0 > n >= 7
21 LD   HL,&0000   HL <- nn								SLA	C	F(4) <- C(7); C(0) <- 0; C(n) <- C(n-1); 0 > n >= 7
22 LDI	(HL),A	   (HL) <- A, HL <- HL + 1						SLA	D	F(4) <- D(7); D(0) <- 0; D(n) <- D(n-1); 0 > n >= 7
23 INC  HL         HL <- HL+1								SLA	E	F(4) <- E(7); E(0) <- 0; E(n) <- E(n-1); 0 > n >= 7
24 INC  H          H <- H+1								SLA	H	F(4) <- H(7); H(0) <- 0; H(n) <- H(n-1); 0 > n >= 7
25 DEC  H          H <- H-1								SLA	L	F(4) <- L(7); L(0) <- 0; L(n) <- L(n-1); 0 > n >= 7
26 LD   H,&00      H <- n								SLA	(HL)	F(4) <- (HL)(7); (HL)(0) <- 0; (HL)(n) <- (HL)(n-1); 0>n<=7
27 DAA             Converts A into packed BCD						SLA	A	F(4) <- A(7); A(0) <- 0; A(n) <- A(n-1); 0 > n >= 7
28 JR   Z,&4546    if Z -> PC <- PC+nn else continue					SRA	B
29 ADD  HL,HL      HL <- HL+HL								SRA	C
2A LDI	A,HL	   A <- (HL), HL <- HL + 1						SRA	D
2B DEC  HL         HL <- HL-1								SRA	E
2C INC  L          L <- L+1								SRA	H
2D DEC  L          L <- L-1								SRA	L
2E LD   L,&00      L <- n								SRA	(HL)
2F CPL             A <- /A								SRA	A
30 JR   NC,&4546   if NC -> PC <- PC+nn else continue					SWAP	B	B(7..4) <-> B(3..0)
31 LD   SP,&0000   SP <- nn								SWAP	C	C(7..4) <-> C(3..0)
32 LDD	HL,A	   (HL) <- A, HL <- HL - 1						SWAP	D	D(7..4) <-> D(3..0)
33 INC  SP         SP <- SP+1								SWAP	E	E(7..4) <-> E(3..0)
34 INC  (HL)       (HL) <- (HL)+1							SWAP	H	H(7..4) <-> H(3..0)
35 DEC  (HL)       (HL) <- (HL)-1							SWAP	L	L(7..4) <-> L(3..0)
36 LD   (HL),&00   (HL) <- n								SWAP	(HL)	(HL)(7..4) <-> (HL)(3..0)
37 SCF             F(4) <- 1								SWAP	A	A(7..4) <-> A(3..0)
38 JR   C,&4546    if C -> PC <- PC+nn else continue					SRL	B	B(7) <- 0; F(4) <- B(0); B(n-1) <- B(n); 0>n<=7
39 ADD  HL,SP      HL <- HL+SP								SRL	C	C(7) <- 0; F(4) <- C(0); B(n-1) <- C(n); 0>n<=7
3A LDD	A,HL	   A <- (HL), HL <- HL - 1						SRL	D	D(7) <- 0; F(4) <- D(0); B(n-1) <- D(n); 0>n<=7
3B DEC  SP         SP <- SP-1								SRL	R	E(7) <- 0; F(4) <- E(0); B(n-1) <- E(n); 0>n<=7
3C INC  A          A <- A+1								SRL	H	H(7) <- 0; F(4) <- H(0); B(n-1) <- H(n); 0>n<=7
3D DEC  A          A <- A-1								SRL	L	L(7) <- 0; F(4) <- L(0); B(n-1) <- L(n); 0>n<=7
3E LD   A,&00      A <- n								SRL	(HL) 	(HL)(7) <- 0; F(4) <- (HL)(0); (HL)(n-1) <- (HL)(n); 0>n<=7
3F CCF             F(4) <- /F(4)							SRL	A	A(7) <- 0; F(4) <- A(0); B(n-1) <- A(n); 0>n<=7
40 LD   B,B        B <- B								BIT	0,B	Z <- /B(0)
41 LD   B,C        B <- C								BIT	0,C	Z <- /C(0)
42 LD   B,D        B <- D								BIT	0,D	Z <- /D(0)
43 LD   B,E        B <- E								BIT	0,E	Z <- /E(0)
44 LD   B,H        B <- H								BIT	0,H	Z <- /H(0)
45 LD   B,L        B <- L								BIT	0,L	Z <- /L(0)
46 LD   B,(HL)     B <- (HL)								BIT	0,(HL)	Z <- /(HL)(0)
47 LD   B,A        B <- A								BIT	0,A	Z <- /A(0)
48 LD   C,B        C <- B								BIT	1,B	Z <- /B(1)
49 LD   C,C        C <- C								BIT	1,C	Z <- /C(1)
4A LD   C,D        C <- D								BIT	1,D	Z <- /D(1)
4B LD   C,E        C <- E								BIT	1,E	Z <- /E(1)
4C LD   C,H        C <- H								BIT	1,H	Z <- /H(1)
4D LD   C,L        C <- L								BIT	1,L	Z <- /L(1)
4E LD   C,(HL)     C <- (HL)								BIT	1,(HL)	Z <- /(HL)(1)
4F LD   C,A        C <- A								BIT	1,A	Z <- /A(1)
50 LD   D,B        D <- B								BIT	2,B	Z <- /B(2)
51 LD   D,C        D <- C								BIT	2,C	Z <- /C(2)
52 LD   D,D        D <- D								BIT	2,D	Z <- /D(2)
53 LD   D,E        D <- E								BIT	2,E	Z <- /E(2)
54 LD   D,H        D <- H								BIT	2,H	Z <- /H(2)
55 LD   D,L        D <- L								BIT	2,L	Z <- /L(2)
56 LD   D,(HL)     D <- (HL)								BIT	2,(HL)	Z <- /(HL)(2)
57 LD   D,A        D <- A								BIT	2,A	Z <- /A(2)
58 LD   E,B        E <- B								BIT	3,B	Z <- /B(3)
59 LD   E,C        E <- C								BIT	3,C	Z <- /C(3)
5A LD   E,D        E <- D								BIT	3,D	Z <- /D(3)
5B LD   E,E        E <- E								BIT	3,E	Z <- /E(3)
5C LD   E,H        E <- H								BIT	3,H	Z <- /H(3)
5D LD   E,L        E <- L								BIT	3,L	Z <- /L(3)
5E LD   E,(HL)     E <- (HL)								BIT	3,(HL)	Z <- /(HL)(3)
5F LD   E,A        E <- A								BIT	3,A	Z <- /A(3)
60 LD   H,B        H <- B								BIT	4,B	Z <- /B(4)
61 LD   H,C        H <- C								BIT	4,C	Z <- /C(4)
62 LD   H,D        H <- D								BIT	4,D	Z <- /D(4)
63 LD   H,E        H <- E								BIT	4,E	Z <- /E(4)
64 LD   H,H        H <- H								BIT	4,H	Z <- /H(4)
65 LD   H,L        H <- L								BIT	4,L	Z <- /L(4)
66 LD   H,(HL)     H <- (HL)								BIT	4,(HL)	Z <- /(HL)(4)
67 LD   H,A        H <- A								BIT	4,A	Z <- /A(4)
68 LD   L,B        L <- B								BIT	5,B	Z <- /B(5)
69 LD   L,C        L <- C								BIT	5,C	Z <- /C(5)
6A LD   L,D        L <- D								BIT	5,D	Z <- /D(5)
6B LD   L,E        L <- E								BIT	5,E	Z <- /E(5)
6C LD   L,H        L <- H								BIT	5,H	Z <- /H(5)
6D LD   L,L        L <- L								BIT	5,L	Z <- /L(5)
6E LD   L,(HL)     L <- (HL)								BIT	5,(HL)	Z <- /(HL)(5)
6F LD   L,A        L <- A								BIT	5,A	Z <- /A(5)
70 LD   (HL),B     (HL) <- B								BIT	6,B	Z <- /B(6)
71 LD   (HL),C     (HL) <- C								BIT	6,C	Z <- /C(6)
72 LD   (HL),D     (HL) <- D								BIT	6,D	Z <- /D(6)
73 LD   (HL),E     (HL) <- E								BIT	6,E	Z <- /E(6)
74 LD   (HL),H     (HL) <- H								BIT	6,H	Z <- /H(6)
75 LD   (HL),L     (HL) <- L								BIT	6,L	Z <- /L(6)
76 HALT            Halt CPU until an interrupt occurs.					BIT	6,(HL)	Z <- /(HL)(6)
77 LD   (HL),A     (HL) <- A								BIT	6,A	Z <- /A(6)
78 LD   A,B        A <- B								BIT	7,B	Z <- /B(7)
79 LD   A,C        A <- C								BIT	7,C	Z <- /C(7)
7A LD   A,D        A <- D								BIT	7,D	Z <- /D(7)
7B LD   A,E        A <- E								BIT	7,E	Z <- /E(7)
7C LD   A,H        A <- H								BIT	7,H	Z <- /H(7)
7D LD   A,L        A <- L								BIT	7,L	Z <- /L(7)
7E LD   A,(HL)     A <- (HL)								BIT	7,(HL)	Z <- /(HL)(7)
7F LD   A,A        A <- A								BIT	7,A	Z <- /A(7)
80 ADD  A,B        A <- A+B								RES	0,B	B(0) <- 0
81 ADD  A,C        A <- A+C								RES	0,C	C(0) <- 0
82 ADD  A,D        A <- A+D								RES	0,D	D(0) <- 0
83 ADD  A,E        A <- A+E								RES	0,E	E(0) <- 0
84 ADD  A,H        A <- A+H								RES	0,H 	H(0) <- 0
85 ADD  A,L        A <- A+L								RES	0,L	L(0) <- 0
86 ADD  A,(HL)     A <- A+(HL)								RES	0,(HL)	(HL)(0) <- 0
87 ADD  A,A        A <- A+A								RES	0,A	A(0) <- 0
88 ADC  A,B        A <- A+B+CF								RES	1,B	B(1) <- 0
89 ADC  A,C        A <- A+C+CF								RES	1,C	C(1) <- 0
8A ADC  A,D        A <- A+D+CF								RES	1,D	D(1) <- 0
8B ADC  A,E        A <- A+E+CF								RES	1,E	E(1) <- 0
8C ADC  A,H        A <- A+H+CF								RES	1,H	H(1) <- 0
8D ADC  A,L        A <- A+L+CF								RES	1,L	L(1) <- 0
8E ADC  A,(HL)     A <- A+(HL)+CF							RES	1,(HL)	(HL)(1) <- 0
8F ADC  A,A        A <- A+A+CF								RES	1,A	A(1) <- 0
90 SUB  A,B        A <- A-B								RES	2,B	B(2) <- 0
91 SUB  A,C        A <- A-C								RES	2,C	C(2) <- 0
92 SUB  A,D        A <- A-D								RES	2,D	D(2) <- 0
93 SUB  A,E        A <- A-E								RES	2,E	E(2) <- 0
94 SUB  A,H        A <- A-H								RES	2,H	H(2) <- 0
95 SUB  A,L        A <- A-L								RES	2,L	L(2) <- 0
96 SUB  A,(HL)     A <- A-(HL)								RES	2,(HL)	(HL)(2) <- 0
97 SUB  A,A        A <- A-A								RES	2,A	A(2) <- 0
98 SBC  A,B        A <- A-B-F(4)							RES	3,B	B(3) <- 0
99 SBC  A,C        A <- A-C-F(4)							RES	3,C	C(3) <- 0
9A SBC  A,D        A <- A-D-F(4)							RES	3,D	D(3) <- 0
9B SBC  A,E        A <- A-E-F(4)							RES	3,E	E(3) <- 0
9C SBC  A,H        A <- A-H-F(4)							RES	3,H	H(3) <- 0
9D SBC  A,L        A <- A-L-F(4)							RES	3,L	L(3) <- 0
9E SBC  A,(HL)     A <- A-(HL)-F(4)							RES	3,(HL)	(HL)(3) <- 0
9F SBC  A,A        A <- A-A-F(4)							RES	3,A	A(3) <- 0
A0 AND  B          A <- A/\B								RES	4,B	B(4) <- 0
A1 AND  C          A <- A/\C								RES	4,C	C(4) <- 0
A2 AND  D          A <- A/\D								RES	4,D	D(4) <- 0
A3 AND  E          A <- A/\E								RES	4,E	E(4) <- 0
A4 AND  H          A <- A/\H								RES	4,H	H(4) <- 0
A5 AND  L          A <- A/\L								RES	4,L	L(4) <- 0
A6 AND  (HL)       A <- A/\(HL)								RES	4,(HL)	(HL)(4) <- 0
A7 AND  A          A <- A/\A								RES	4,A	A(4) <- 0
A8 XOR	B	   A <- A xor B								RES	5,B	B(5) <- 0
A9 XOR	C	   A <- A xor C								RES	5,C	C(5) <- 0
AA XOR	D	   A <- A xor D								RES	5,D  	D(5) <- 0
AB XOR	E	   A <- A xor E								RES	5,E	E(5) <- 0
AC XOR	H	   A <- A xor H								RES	5,H	H(5) <- 0
AD XOR	L	   A <- A xor L								RES	5,L	L(5) <- 0
AE XOR	(HL)	   A <- A xor (HL)							RES	5,(HL)	(HL)(5) <- 0
AF XOR	A	   A <- A xor A								RES	5,A	A(5) <- 0
B0 OR	B	   A <- A \/ B								RES	6,B	B(6) <- 0
B1 OR	C	   A <- A \/ C								RES	6,C	C(6) <- 0
B2 OR	D	   A <- A \/ D								RES	6,D	D(6) <- 0
B3 OR	E	   A <- A \/ E								RES	6,E	E(6) <- 0
B4 OR	H	   A <- A \/ H								RES	6,H	H(6) <- 0
B5 OR	L	   A <- A \/ L								RES	6,L	L(6) <- 0
B6 OR	(HL)	   A <- A \/ (HL)							RES	6,(HL)	(HL)(6) <- 0
B7 OR	A	   A <- A \/ A								RES	6,A	A(6) <- 0
B8 CP   B          A-B									RES	7,B	B(7) <- 0
B9 CP   C          A-C									RES	7,C	C(7) <- 0
BA CP   D          A-D									RES	7,D	D(7) <- 0
BB CP   E          A-E									RES	7,E	E(7) <- 0
BC CP   H          A-H									RES	7,H	H(7) <- 0
BD CP   L          A-L									RES	7,L	L(7) <- 0
BE CP   (HL)       A-(HL)								RES	7,(HL)	(HL)(7) <- 0
BF CP   A          A-A									RES	7,A	A(7) <- 0
C0 RET  NZ         if NZ -> RET else continue						SET	0,B	B(0) <- 1
C1 POP  BC         BCl <- (SP), BCh <- (SP+1), SP <- SP+2				SET	0,C	C(0) <- 1
C2 JP   NZ,&0000   if NZ -> SP <- nn else continue					SET	0,D	D(0) <- 1
C3 JP   &0000      PC <- nn								SET	0,E	E(0) <- 1
C4 CALL NZ,&0000   if NZ -> CALL nn else continue					SET	0,H	H(0) <- 1
C5 PUSH BC         (SP-1) <- BCh, (SP-2) <- BCl, SP <- SP-2				SET	0,L	L(0) <- 1
C6 ADD  A,&00      A <- A+n								SET	0,(HL)	(HL)(0) <- 1
C7 RST  &00        (SP-1) <- PCh, (SP-2) <- PCl, PCh <- 0, PCl <- &00, SP <- SP-2	SET	0,A	A(0) <- 1
C8 RET  Z          if Z -> RET else continue						SET	1,B	B(1) <- 1
C9 RET             PCl <- (SP), PCh <- (SP+1), SP <- SP+2 				SET	1,C	C(1) <- 1
CA JP   Z,&0000    if Z -> SP <- nn else continue					SET	1,D	D(1) <- 1
CB **** CB ****		   								SET	1,E	E(1) <- 1
CC CALL Z,&0000    if Z -> CALL nn else continue					SET	1,H	H(1) <- 1
CD CALL &0000      (SP-1) <- PCh, (SP-2) <- PCl, PC <- nn, SP <- SP-2 			SET	1,L	L(1) <- 1
CE ADC  A,&00      A <- A+n+CF								SET	1,(HL)	(HL)(1) <- 1
CF RST  &08        (SP-1) <- PCh, (SP-2) <- PCl, PCh <- 0, PCl <- &08, SP <- SP-2 	SET	1,A	A(1) <- 1
D0 RET  NC         if NC -> RET else continue						SET	2,B	B(2) <- 1
D1 POP  DE         DEl <- (SP), DEh <- (SP+1), SP <- SP+2				SET	2,C	C(2) <- 1
D2 JP   NC,&0000   if NC -> SP <- nn else continue					SET	2,D	D(2) <- 1
D3		  									SET	2,E	E(2) <- 1
D4 CALL NC,&0000   if NC -> CALL nn else continue					SET	2,H	H(2) <- 1
D5 PUSH DE         (SP-1) <- DEh, (SP-2) <- DEl, SP <- SP-2				SET	2,L	L(2) <- 1
D6 SUB  A,&00      A <- A-n								SET	2,(HL)	(HL)(2) <- 1
D7 RST  &10        (SP-1) <- PCh, (SP-2) <- PCl, PCh <- 0, PCl <- &10, SP <- SP-2	SET	2,A	A(2) <- 1
D8 RET  C          if C -> RET else continue						SET	3,B	B(3) <- 1
D9 RETI		   Return then enable interrupts.					SET	3,C	C(3) <- 1
DA JP   C,&0000    if C -> SP <- nn else continue					SET	3,D	D(3) <- 1
DB		  									SET	3,E	E(3) <- 1
DC CALL C,&0000    if C -> CALL nn else continue					SET	3,H	H(3) <- 1
DD		  									SET	3,L	L(3) <- 1
DE SBC  A,&00      A <- A-n-F(4)							SET	3,(HL)	(HL)(3) <- 1
DF RST  &18        (SP-1) <- PCh, (SP-2) <- PCl, PCh <- 0, PCl <- &18, SP <- SP-2 	SET	3,A	A(3) <- 1
E0 LDH  (n), A     ($FF00+n) <- A							SET	4,B	B(4) <- 1
E1 POP  HL         HLl <- (SP), HLh <- (SP+1), SP <- SP+2				SET	4,C	C(4) <- 1
E2 LD	(C),A      ($FF00+C) <- A							SET	4,D 	D(4) <- 1
E3		  									SET	4,E	E(4) <- 1
E4		  									SET	4,H	H(4) <- 1
E5 PUSH HL         (SP-1) <- HLh, (SP-2) <- HLl, SP <- SP-2				SET	4,L	L(4) <- 1
E6 AND  &00        A <- A/\n								SET	4,(HL)	(HL)(4) <- 1
E7 RST  &20        (SP-1) <- PCh, (SP-2) <- PCl, PCh <- 0, PCl <- &20, SP <- SP-2	SET	4,A	A(4) <- 1
E8 ADD	SP,&0000   SP <- SP+nn								SET	5,B	B(5) <- 1
E9 JP   (HL)       SP <- (HL)								SET	5,C	C(5) <- 1
EA LD	(&0000),A  (nn) <- A								SET	5,D	D(5) <- 1
EB		  									SET	5,E	E(5) <- 1
EC		  									SET	5,H	H(5) <- 1
ED		  									SET	5,L	L(5) <- 1
EE XOR 	&00	   A <- A xor n								SET	5,HL	(HL)(5) <- 1
EF RST  &28        (SP-1) <- PCh, (SP-2) <- PCl, PCh <- 0, PCl <- &28, SP <- SP-2	SET	5,A	A(5) <- 1
F0 LDH	A,(n)      A <- ($FF00+n)							SET	6,B	B(6) <- 1
F1 POP  AF         AFl <- (SP), AFh <- (SP+1), SP <- SP+2				SET	6,C	C(6) <- 1
F2 LD	A,(C)      A <- ($FF00+C)							SET	6,D	D(6) <- 1
F3 DI              Disable interrupts.							SET	6,E	E(6) <- 1
F4		  									SET	6,H	H(6) <- 1
F5 PUSH AF         (SP-1) <- AFh, (SP-2) <- AFl, SP <- SP-2				SET	6,L	L(6) <- 1
F6 OR	&00	   A <- A \/ n								SET	6,(HL)	(HL)(6) <- 1
F7 RST  &30        (SP-1) <- PCh, (SP-2) <- PCl, PCh <- 0, PCl <- &30, SP <- SP-2	SET	6,A	A(6) <- 1
F8 LD	A,SP+dd    HL <- (SP+dd)							SET	7,B	B(7) <- 1
F9 LD   SP,HL      SP <- HL								SET	7,C	C(7) <- 1
FA LD	A,(&0000)  A <- (nn)								SET	7,D	D(7) <- 1
FB EI              Enable interrupts							SET	7,E	E(7) <- 1
FC		  									SET	7,H	H(7) <- 1
FD		  									SET	7,L	L(7) <- 1
FE CP   &00        A-n									SET	7,(HL)	(HL)(7) <- 1
FF RST  &38        (SP-1) <- PCh, (SP-2) <- PCl, PCh <- 0, PCl <- &38, SP <- SP-2	SET	7,A	A(7) <- 1