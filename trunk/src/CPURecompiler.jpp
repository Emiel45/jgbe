#include "Global.inc"

#ifdef ENABLE_RECOMPILER

import java.util.Vector;

import org.apache.bcel.*;
import org.apache.bcel.generic.*;
import org.apache.bcel.classfile.*;

public class CPURecompiler {
	/** 'Singleton' design cause i'm too lazy
	 *  to find the right place to construct an
	 *  instance of this class
	 */
	private static CPURecompiler recompiler = null;

	// include classes we use for code/data representation
	#include "recompiler/ClassDefs.inc"

	/** Dynamic recompilation for dummies: */
	// Step 1: Decompile the GB asm code to intermediate representation
	#include "recompiler/Decompiler.inc"
	// Step 2: Perform optimisations on the intermediate representation
	#include "recompiler/Optimiser.inc"
	// Step 3: Assemble the intermediate representation into java bytecode
	#include "recompiler/Assembler.inc"


	public static CPURunBlock doRecompile(int PC) {
		if (recompiler == null) recompiler = new CPURecompiler();
		return recompiler.Recompile(PC);
	}

	static int testing = 0;

	private CPURunBlock Recompile(int PC) {
		VECTOR(SimpleAssign) imr1;
		imr1 = Decompile(PC);
		//return null;
		if (imr1.size() > testing) {
			testing = imr1.size();
			PRINTF("Decompiled block @ PC=0x%02x of size %d\n", PC, imr1.size());
			FOREACH(SimpleAssign, sa, imr1) {
				PRINTLN(sa.asString());
			}
		}
		if (imr1.size() > 2)
			return Assemble(imr1);
		else
			return null;
	}

	public static void main( String[] args ) {
		CPURunBlock testblock = doRecompile(0);
		PRINTLN(testblock.execute());
		/*int t1 = CPU.read(0xc590);
		CPU.H = 0xc5;
		CPU.L = 0x40;
		CPU.A = t1;
		//CPU.F = t2 ? 1 : 0;
		if (t1 < CPU.read(0xc540)) {
			CPU.F = CPU.CF_Mask;
			CPU.PC = 0x2cc6;
		}
		else
		{
			CPU.F = 0;
			CPU.PC = 0x2cc4;
		}*/
		int a = 1;
		int b = 2;
		int c = (a << 8) | b;
		int d = (c == 0)? 12 : 0;
		CPU.PC = CPU.read(c);
	}
}

#endif//ENABLE_RECOMPILER
