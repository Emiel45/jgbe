#include "Global.inc"

import javax.swing.*;
import javax.swing.event.*;
import java.awt.*;
import java.awt.event.*;
import java.util.Vector;
import java.net.*;
import java.awt.image.BufferedImage;
import javax.swing.table.*;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import java.io.*;

public class ScaleBuilder {

	JDialog dialog;
	JFrame owner;
	DefaultTableModel tablemodel1;
	DefaultTableModel tablemodel2;
	boolean array1[][] = new boolean[3][3];
	int array2[][]     = new int[4][4];
	JButton buttonLoad;
	JButton buttonSave;

	JTable table1;
	JTable table2;

	public void FillTable() {
	}

	public void FillTable1() {
		for (int y = 0; y < 3; ++y) {
			for (int x = 0; x < 3; ++x) {
				table1.setValueAt(new Boolean(array1[y][x]), y,x);
			}
		}
	}

	private int ind;

	public void FillTable2() {
		ind = 0;
		for (int y = 0; y < 3; ++y) {
			for (int x = 0; x < 3; ++x) {
				if ((x!=2) || (y!=2)) {
				  ind <<=1;
				  ind |= (array1[y][x] ? 1 : 0);
				}
			}
		}

		array2 = CPU.VC.Scalerx4[ind];

		for (int y = 0; y < 4; ++y) {
			for (int x = 0; x < 4; ++x) {
				table2.setValueAt(new Integer(array2[y][x]), y,x);
			}
		}

	}

	public class ScaleBuilderTableModelListener1 implements TableModelListener {
		public void tableChanged(TableModelEvent evt) {
			if (evt.getType() == TableModelEvent.UPDATE) {
				int column = evt.getColumn();
				int row = evt.getFirstRow();
				array1[row][column] = ((Boolean)table1.getValueAt(row, column)).booleanValue();
				PRINTLN("Table1 - UPDATE");
			}
			FillTable2();
		}
	}

	public class ScaleBuilderTableModelListener2 implements TableModelListener {
		public void tableChanged(TableModelEvent evt) {
			if (evt.getType() == TableModelEvent.UPDATE) {
				int column = evt.getColumn();
				int row = evt.getFirstRow();
				array2[row][column] = ((Integer)table2.getValueAt(row, column)).intValue();
				PRINTLN("Table2 - UPDATE");
			}
		}
	}


	public ScaleBuilder(JFrame o) {
		owner = o;
		JScrollPane scroll;
		dialog= new JDialog(owner, "ScaleBuilder", true);
		dialog.setDefaultCloseOperation(JDialog.DO_NOTHING_ON_CLOSE);
			dialog.addWindowListener(new WindowAdapter() {
				public void windowClosing(WindowEvent we) {
					dialog.setVisible(false);
			}
		});
		tablemodel1 = new DefaultTableModel(3,3);
		tablemodel2 = new DefaultTableModel(4,4);


		table1 = new JTable(3,3) {
			private static final long serialVersionUID = 1L; // prevent warning
			public Class getColumnClass(int column) { //enable JTable to use different renderers, eg Checkbox for Boolean
				return (new Boolean(true)).getClass();
			}
		};
		table2 = new JTable(4,4);

		table1.getModel().addTableModelListener(new ScaleBuilderTableModelListener1());
		table2.getModel().addTableModelListener(new ScaleBuilderTableModelListener2());

		scroll  = new JScrollPane(table1);
		//scroll.add(table2);
 		//scroll.add(table1);

		scroll.setPreferredSize(new Dimension(90, 90));
		dialog.add(scroll,BorderLayout.NORTH);

		scroll  = new JScrollPane(table2);
		//scroll.add(table2);
 		//scroll.add(table1);

		scroll.setPreferredSize(new Dimension(480, 240));
		dialog.add(scroll,BorderLayout.SOUTH);

		//dialog.addComponentListener(this);
		dialog.setLocationRelativeTo(null);
		//dialog.setResizable(false);
		dialog.pack();

		Dimension d = owner.getSize();
		Point     p = new Point();
		p.setLocation((owner.getLocation().getX()+(d.getWidth()/2)) - (dialog.getWidth()/2), (owner.getLocation().getY()+d.getHeight()/2)-(dialog.getHeight()/2));
		dialog.setLocation(p);
		dialog.setVisible( true );
		FillTable();
	}
}
