#include "Global.inc"

import java.io.InputStream;
import java.io.OutputStream;
import java.util.Enumeration;
import java.util.Vector;

import javax.microedition.io.*;
import javax.microedition.io.file.*;

public class VFS_JSR75 implements IVFSNode {
	private String name;
	private String path;

	public VFS_JSR75(String name, String path)
	{
		this.name = name;
		this.path = path;
	}

	public boolean exists()
	{
		return true;
	};

	public boolean isFile()
	{
		return !isDir();
	}

	public boolean isDir()
	{
		return path.equals("") || path.endsWith("/");
	}

	public String getURL()
	{
		return "file:///"+path;
	}

	public String getName()
	{
		return name;
	}

	/* for files */
	public InputStream getInputStream()
	{
		if (!isFile()) return null;
		try {
			FileConnection fc = (FileConnection)Connector.open("file:///"+path);
			return fc.openInputStream();
		} catch (Throwable e) {
			return null;
		}
	}

	public OutputStream getOutputStream()
	{
		return null;
	}

	/* for dirs */
	public Enumeration getChildren()
	{
		if (!isDir()) return null;

		Vector children = new Vector();
		if (path.equals("")) {
			Enumeration e =  FileSystemRegistry.listRoots();
			while (e.hasMoreElements()) {
				String rootName = (String)e.nextElement();
				System.out.println("mounted root:"+rootName);
				children.addElement(new VFS_JSR75(rootName, rootName));
			}
		} else  {
			try {
				System.out.println("dir:"+path);
				FileConnection fc = (FileConnection)Connector.open("file:///"+path);
				Enumeration e = fc.list();
				while (e.hasMoreElements()) {
					String nname = (String)e.nextElement();
					System.out.println("subdir:" + nname);
					children.addElement(new VFS_JSR75(nname, path+nname));
				}
			} catch (Throwable e) {
			}
		};
		return children.elements();
	}

	public IVFSNode createFile(String name)
	{
		return null;
	}

	public IVFSNode createDir(String name)
	{
		return null;
	}

	public void delete(String name)
	{
	}
};
