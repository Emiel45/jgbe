#include "Global.inc"
#ifndef USE_JAVA_142
import javax.swing.*;
import javax.swing.event.*;
import java.awt.*;
import java.awt.event.*;
import java.util.LinkedList;
import java.net.*;
import java.io.*;
import java.awt.image.BufferedImage;

		class CPURunner implements Runnable {
			public void run() {
				while (!Thread.interrupted()  && (CPU.nextinstruction()!=0)) {};
			}
		}

public class swinggui implements ActionListener, ItemListener, KeyListener, ComponentListener {
		public static boolean RIGHT_TO_LEFT = false;
		private static DrawingArea grfx;
		private static JMenuBar menubar;
		protected VideoController VC;
		protected CPU cpu;
		private int fps;
		JMenuItem menuitemExit;
		JMenuItem menuitemScale1x;
		JMenuItem menuitemScale2x;
		JMenuItem menuitemScale3x;
		JMenuItem menuitemOpenROM;
		JMenuItem menuitemSaveState;
		JMenuItem menuitemLoadState;
		JMenuItem menuitemSeparator;

		CPURunner cpuRunner;
		Thread cpurunthread;

		public void startCPU() {
			cpuRunner = new CPURunner();
			cpurunthread = new Thread(cpuRunner);
			cpurunthread.start();
		}

		public void stopCPU() {
			try {
				cpurunthread.interrupt();
				cpurunthread.join();
			}
			catch (java.lang.InterruptedException e2) {};
		}

		public class DrawingArea extends JPanel{
			VideoController VC;
			public DrawingArea(VideoController vc) {
			super();
			VC=vc;
			}
			public void paintComponent(Graphics g) {
				super.paintComponent(g);
				g.drawImage(cpu.VC.getImage(),0,0, this);
				++fps;
    	}
		}

		public swinggui() {
		}

		private JMenuBar createJMenuBar() {
			JMenuBar mainMenuBar;
			JMenu menuFile;
			JMenu menuSettings;
			JMenu menuScaling;
			JMenu menuState;
			mainMenuBar = new JMenuBar();

			menuFile = new JMenu( "File" );
			menuFile.setMnemonic( KeyEvent.VK_F );
			mainMenuBar.add( menuFile );
			menuSettings = new JMenu( "Settings" );
			menuSettings.setMnemonic( KeyEvent.VK_S );
			mainMenuBar.add( menuSettings );



			menuitemOpenROM = new JMenuItem("Open ROM", KeyEvent.VK_O);
			menuitemOpenROM.setAccelerator( KeyStroke.getKeyStroke( KeyEvent.VK_O, ActionEvent.CTRL_MASK ) );
			menuitemOpenROM.addActionListener( this );
			menuFile.add(menuitemOpenROM);
			menuitemExit = new JMenuItem( "Exit", KeyEvent.VK_X );
			menuitemExit.setAccelerator( KeyStroke.getKeyStroke( KeyEvent.VK_Q, ActionEvent.CTRL_MASK) );
			menuitemExit.addActionListener( this );
			menuFile.add( menuitemExit );

			menuScaling = new JMenu( "Scaling");
			menuitemScale1x = new JMenuItem( "Scale 1x", KeyEvent.VK_1 );
			menuitemScale2x = new JMenuItem( "Scale 2x", KeyEvent.VK_2 );
			menuitemScale3x = new JMenuItem( "Scale 3x", KeyEvent.VK_3 );
			menuitemScale1x.setAccelerator( KeyStroke.getKeyStroke( KeyEvent.VK_1, ActionEvent.CTRL_MASK ) );
			menuitemScale2x.setAccelerator( KeyStroke.getKeyStroke( KeyEvent.VK_2, ActionEvent.CTRL_MASK ) );
			menuitemScale3x.setAccelerator( KeyStroke.getKeyStroke( KeyEvent.VK_3, ActionEvent.CTRL_MASK ) );
			menuitemScale1x.addActionListener( this );
			menuitemScale2x.addActionListener( this );
			menuitemScale3x.addActionListener( this );
			menuScaling.add( menuitemScale1x );
			menuScaling.add( menuitemScale2x );
			menuScaling.add( menuitemScale3x );
			menuSettings.add( menuScaling) ;

			menuState = new JMenu("State");
			menuitemSaveState = new JMenuItem( "Save State", KeyEvent.VK_S );
			menuitemLoadState = new JMenuItem( "Load State", KeyEvent.VK_L );
			menuitemSaveState.setAccelerator( KeyStroke.getKeyStroke( KeyEvent.VK_S, ActionEvent.CTRL_MASK ) );
			menuitemLoadState.setAccelerator( KeyStroke.getKeyStroke( KeyEvent.VK_L, ActionEvent.CTRL_MASK ) );
			menuitemSaveState.addActionListener( this );
			menuitemLoadState.addActionListener( this );
			menuState.add( menuitemSaveState );
			menuState.add( menuitemLoadState );
			mainMenuBar.add( menuState) ;
			return mainMenuBar;
		}

		public void addComponentsToPane( Container contentPane ) {
//      Use BorderLayout. Default empty constructor with no horizontal and vertical
//      gaps
			contentPane.setLayout( new BorderLayout( 5,5 ) );
			if ( !( contentPane.getLayout() instanceof BorderLayout ) ) {
				contentPane.add( new JLabel( "Container doesn't use BorderLayout!" ) );
				return;
			}

			if ( RIGHT_TO_LEFT ) {
				contentPane.setComponentOrientation(
				  java.awt.ComponentOrientation.RIGHT_TO_LEFT );
			}

			grfx=new DrawingArea( cpu.VC ); //doublebuffering
			grfx.setFocusable(true);
			grfx.addKeyListener(this);
			grfx.setDoubleBuffered(false);
			grfx.setPreferredSize( new Dimension( 160*cpu.VC.nscale, 144*cpu.VC.nscale ) ); //quadruple each pixel
			contentPane.add( grfx, BorderLayout.CENTER );
		}

		JFrame frame;

		private void createAndShowGUI() {
			JFrame.setDefaultLookAndFeelDecorated( true );

			frame = new JFrame( "JGameBoy Emulator V0.01" );
			frame.setDefaultCloseOperation( JFrame.EXIT_ON_CLOSE );
// 			frame.setBounds( 60,60,100,100 );

			//Set up the content pane and add swing components to it
			frame.setJMenuBar( createJMenuBar() );
			addComponentsToPane( frame.getContentPane() );

			frame.addComponentListener(this);
			frame.setLocationRelativeTo(null);
			frame.setResizable(false);
			frame.pack();
			frame.setVisible( true );

		}

		public void componentHidden(ComponentEvent e) {}
		public void componentMoved(ComponentEvent e) {}
		public void componentShown(ComponentEvent e) {}

		public void componentResized(ComponentEvent e) {
		}

		public void actionPerformed( ActionEvent e ) {
/*				JMenuItem source = ( JMenuItem )( e.getSource() );
				String s = "Menu Item source: " + source.getText()
			           + " (an instance of " + getClassName( source ) + ")";
				System.out.println(s);*/
			if (e.getSource().equals( menuitemExit)) {
				System.exit(0);
			}
			else if (e.getSource().equals( menuitemScale1x )) {
				VC.nscale = 1;
 				grfx.setPreferredSize( new Dimension( 160*cpu.VC.nscale, 144*cpu.VC.nscale ) ); //quadruple each pixel
				grfx.setSize( new Dimension( 160*cpu.VC.nscale, 144*cpu.VC.nscale ) ); //quadruple each pixel
				frame.pack();
			}
			else if (e.getSource().equals( menuitemScale2x )) {
				VC.nscale = 2;
 				grfx.setPreferredSize( new Dimension( 160*cpu.VC.nscale, 144*cpu.VC.nscale ) ); //quadruple each pixel
				grfx.setSize( new Dimension( 160*cpu.VC.nscale, 144*cpu.VC.nscale ) ); //quadruple each pixel
				frame.pack();
			}
			else if (e.getSource().equals( menuitemScale3x )) {
				VC.nscale = 3;
 				grfx.setPreferredSize( new Dimension( 160*cpu.VC.nscale, 144*cpu.VC.nscale ) ); //quadruple each pixel
				grfx.setSize( new Dimension( 160*cpu.VC.nscale, 144*cpu.VC.nscale ) ); //quadruple each pixel
				frame.pack();
			}
			else if(e.getSource().equals( menuitemOpenROM )) {
				JFileChooser fc = new JFileChooser(".");

				// Show open dialog; this method does not return until the dialog is closed
				fc.showOpenDialog(frame);
				File selFile = fc.getSelectedFile();
				if(selFile != null) {
					System.out.println(selFile.getAbsolutePath());

					stopCPU();

					CPU.setCartridge(new Cartridge(selFile.getAbsolutePath()));

					startCPU();
				}
			}
			else if(e.getSource().equals( menuitemSaveState )) {
				stopCPU();
				try {
					DataOutputStream dostream = FHandler.getDataOutputStream("/tmp/jgbe.st0");
					CPU.saveState(dostream);
					dostream.close();
				}
				catch (java.io.IOException ioe) {};
				startCPU();
			}
			else if(e.getSource().equals( menuitemLoadState )) {
				stopCPU();
				try {
					DataInputStream distream = FHandler.getDataInputStream("/tmp/jgbe.st0");
					CPU.loadState(distream);
					distream.close();
				}
				catch (java.io.IOException ioe) {};
				startCPU();
			}
			else {
				//System.out.println("timer!");
				frame.setTitle("" + fps + " - JGameBoy Emulator V0.01");
				//cpu.AC.srendered = 0;
				fps = 0;
			}
		}

		public void itemStateChanged( ItemEvent e ) {
			JMenuItem source = ( JMenuItem )( e.getSource() );
			String s = "Menu Item source: " + source.getText()
			           + " (an instance of " + getClassName( source ) + ")"
			           + "\n"
			           + "    State of check Box: "
			           + (( e.getStateChange() == ItemEvent.SELECTED ) ?
			              "selected":"unselected" );
			System.out.println( s );
		}

		public void keyTyped(KeyEvent e) {
			//System.out.println("keyTyped");
		}

		public void keyPressed(KeyEvent e) {
			switch(e.getKeyCode()){
				case KeyEvent.VK_Z:
					cpu.ButtonKeyStatus&=~1; // A
					cpu.triggerInterrupt(4);
					break;
				case KeyEvent.VK_X:
					cpu.ButtonKeyStatus&=~2; // B
					cpu.triggerInterrupt(4);
					break;
				case KeyEvent.VK_MINUS:
					cpu.ButtonKeyStatus&=~4; // Select
					cpu.triggerInterrupt(4);
					break;
				case KeyEvent.VK_EQUALS:
					cpu.ButtonKeyStatus&=~8; // Start
					cpu.triggerInterrupt(4);
					break;
				case KeyEvent.VK_RIGHT:
					cpu.DirectionKeyStatus&=~1; // Right
					cpu.triggerInterrupt(4);
					break;
				case KeyEvent.VK_LEFT:
					cpu.DirectionKeyStatus&=~2; // Left
					cpu.triggerInterrupt(4);
					break;
				case KeyEvent.VK_UP:
					cpu.DirectionKeyStatus&=~4; // Up
					cpu.triggerInterrupt(4);
					break;
				case KeyEvent.VK_DOWN:
					cpu.DirectionKeyStatus&=~8; // Down
					cpu.triggerInterrupt(4);
					break;
				default:
					System.out.println("keyPressed");
					break;
				}
		}
		public void keyReleased(KeyEvent e) {
			switch(e.getKeyCode()){
				case KeyEvent.VK_Z:
					cpu.ButtonKeyStatus|=1; // A
					break;
				case KeyEvent.VK_X:
					cpu.ButtonKeyStatus|=2; // B
					break;
				case KeyEvent.VK_MINUS:
					cpu.ButtonKeyStatus|=4; // Select
					break;
				case KeyEvent.VK_EQUALS:
					cpu.ButtonKeyStatus|=8; // Start
					break;
				case KeyEvent.VK_RIGHT:
					cpu.DirectionKeyStatus|=1; // Right
					break;
				case KeyEvent.VK_LEFT:
					cpu.DirectionKeyStatus|=2; // Left
					break;
				case KeyEvent.VK_UP:
					cpu.DirectionKeyStatus|=4; // Up
					break;
				case KeyEvent.VK_DOWN:
					cpu.DirectionKeyStatus|=8; // Down
					break;
				default:
					System.out.println("keyReleased" + e.getKeyCode());
					break;
				}
		}


		// Returns the class name, no package info
		protected static String getClassName( Object o ) {
			String classString = o.getClass().getName();
			int dotIndex = classString.lastIndexOf( "." );
			return classString.substring( dotIndex+1 );	//Returns only Class name
		}

		public static void main( String[] args ) {
			final swinggui gui=new swinggui();
			Cartridge cart;

			boolean sound=true, debug=true;
			String romfile="", logfile="";
			for (int i = 0; i < args.length; ++i) {
				if (args[i].charAt(0)!='-')
					romfile = args[i];
				if (args[i].equals("-log"))
					logfile = args[++i];
				if (args[i].equals("-nosound"))
					sound = false;
				if (args[i].equals("-nodebug"))
					debug = false;
			}
			if (romfile.equals("")) {
				System.out.println();
				System.out.println("ERROR: missing argument");
				System.out.println();
				System.out.println("USAGE: java swinggui ROMFILE [-log LOGFILE] [-nosound] [-nodebug]");
				System.out.println();
				return;
			}

			cart = new Cartridge(romfile);
			if(cart.getError()!=null) {
				System.out.println("ERROR: "+cart.getError());
				return;
			}

			System.out.println("Succesfully loaded ROM :)");
			gui.cpu = new CPU(cart);
			gui.VC = gui.cpu.VC;

			gui.createAndShowGUI();
			gui.cpu.reset();
			gui.cpu.VC.addListener(gui.grfx);
			if (!sound)
				gui.cpu.AC.isMuted = true;

			Timer timer = new Timer(1000, gui);
			timer.setInitialDelay(1000);
			timer.start();


			/*DEBUGGER*/
			if (debug) {
				final Debugger dbgr=new Debugger(gui, logfile); //The GUI to which this debugger belongs
			}
			else {
				gui.startCPU();
			}
		}
	}
#endif
