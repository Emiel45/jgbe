#include "Global.inc"
import javax.swing.*;
import javax.swing.event.*;
import java.awt.*;
import java.awt.event.*;
import java.util.ArrayList;
import java.net.*;
import java.awt.image.BufferedImage;
import javax.swing.table.*;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import java.io.*;
import java.util.Arrays;

public class AdvancedAudioPropertiesDialog implements ComponentListener, ChangeListener, ActionListener {
	JFrame owner;
	AudioController ac;
	JDialog dialog;
	JSlider audioWriteInterval;
	JSlider audioBufferSize;

	public AdvancedAudioPropertiesDialog(JFrame o) { // DO NOT USE THIS CONSTRUCTOR
		ASSERT(false);
	}

	int[] samplingRates = {4000, 8000, 11025, 22050, 44100};
	public AdvancedAudioPropertiesDialog(JFrame o, AudioController ac) {
		owner = o;
		this.ac = ac;
		dialog= new JDialog(owner, "Advanced Audio Properties", true);
/*		dialog.setSize(new Dimension(640,480));
		dialog.setPreferredSize(new Dimension(640,480));*/
		/* Setting Components */
		JComboBox outputDevices = new JComboBox();
		JCheckBox useStereo = new JCheckBox("Stereo output");

		
		JSlider samplingRateSlider = new JSlider(0, samplingRates.length);
		VECTOR(Integer) sr = new VECTOR(Integer)();
		for(int i=0; i<samplingRates.length; ++i) sr.add(new Integer(samplingRates[i]));
		JSpinner samplingRateSpinner = new JSpinner(new SpinnerListModel(sr));

		JSlider bufferSizeSlider = new JSlider(1, 4096);
		JSpinner bufferSizeSpinner = new JSpinner(new SpinnerNumberModel(1,1,4096,1));
		
		JSlider outputIntervalSlider = new JSlider(0, bufferSizeSlider.getMaximum());
		JSpinner outputIntervalSpinner = new JSpinner(new SpinnerNumberModel(1,1,bufferSizeSlider.getMaximum(),1));
		
		if(ac != null && ac.audioSource != null) {
			BorderLayout bl = new BorderLayout();
			dialog.setLayout(bl);
			JPanel container = new JPanel();
			container.setLayout(new GridLayout(8,2));
			container.add(new JLabel("Output device:"));
			container.add(new JPanel());
			container.add(outputDevices);
			container.add(useStereo);
			container.add(new JLabel("Sampling rate:"));
			container.add(new JPanel());
			container.add(samplingRateSlider);
			container.add(samplingRateSpinner);
			container.add(new JLabel("Buffer size:"));
			container.add(new JPanel());
			container.add(bufferSizeSlider);
			container.add(bufferSizeSpinner);
			container.add(new JLabel("Output interval:"));
			container.add(new JPanel());
			container.add(outputIntervalSlider);
			container.add(outputIntervalSpinner);
			dialog.add(new JPanel(), BorderLayout.NORTH);
			dialog.add(new JPanel(), BorderLayout.SOUTH);
			dialog.add(new JPanel(), BorderLayout.WEST);
			dialog.add(new JPanel(), BorderLayout.EAST);
			dialog.add(container, BorderLayout.CENTER);
		}
		dialog.addComponentListener(this);
		dialog.setLocationRelativeTo(null);
		dialog.setResizable(true);
		dialog.pack();

		Dimension d = owner.getSize();
		Point     p = new Point();
		p.setLocation((owner.getLocation().getX()+(d.getWidth()/2)) - (dialog.getWidth()/2), (owner.getLocation().getY()+d.getHeight()/2)-(dialog.getHeight()/2));
		dialog.setLocation(p);
	}

	public void showWindow() {
			dialog.setVisible( true );
	}
	
	public void actionPerformed( ActionEvent e ) {
	}
	
	public void stateChanged( ChangeEvent e) {
		
	}
	
	public void componentHidden(ComponentEvent e) {}
	public void componentMoved(ComponentEvent e) {}
	public void componentShown(ComponentEvent e) {}
	public void componentResized(ComponentEvent e) {}
}
