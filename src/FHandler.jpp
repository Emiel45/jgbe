#include "Global.inc"
import java.io.*;
import java.util.zip.*;
import java.awt.Font;

public final class FHandler {
	// workaround for getResourceAsStream not working in static methods
	private static FHandler fhinstance = new FHandler();

	/** returns (and creates if it does not exist yet) a
	 *  path to a directory which should be used by jgbe
	 *  to store persistent information, like settings
	 *  and save states
	 */
	private static final String RootJGBEDir() throws IOException {
		File file;
		String path;

		path = System.getenv("JGBEDIR");
		if (path != null && !path.equals("")) {
			if (!path.endsWith(File.separator))
				path += File.separator;
			file = new File(path);

			if (file.exists() || file.mkdir())
				return path;

			throw new IOException("Can't find or create '"+path+"'($JGBEDIR)");
		}

		path = System.getProperty("user.home")+File.separator+ ".jgbe"+File.separator;
		file = new File(path);

		if (file.exists() || file.mkdir())
			return path;

		throw new IOException("Can't find or create '"+path+"'(user.home)");
	}

	public static String JGBEDir(String relpath) throws IOException {
		// Sanitize relpath
		if (relpath.length() > 0 && relpath.startsWith(File.separator))
			relpath = relpath.substring(1);
		if (!relpath.endsWith(File.separator))
			relpath += File.separator;

		// Find root JGBEDir
		String rootpath = RootJGBEDir();

		// Create relative dir
		String path = rootpath + relpath;
		File dir=new File(path);
		if (!dir.exists() && !dir.mkdirs())
			throw new IOException("Can't or create '"+relpath+"' in '"+rootpath+"'");
		return path;
	}

	public static DataInputStream getDataInputStream(String fname) throws IOException {
		int dotPos=0;
		int dp = fname.indexOf(".");
		while(dp>=0) { //NOTE: Java 1.4.2 does not have 'lastIndexOf'
			dotPos=dp;
			dp=fname.indexOf(".",dp+1);
		}
		String fext = fname.substring(dotPos);
		if ( !fext.equals(".zip") ) {
			// plain files
#ifndef USE_JAVA_MOBILE
			FileInputStream fistream = new FileInputStream(fname);
			BufferedInputStream bistream = new BufferedInputStream(fistream);
#else
			System.out.println("NonStatic.class.getResourceAsStream("+fname+");");
			Class clazz = Runtime.getRuntime().getClass();
			InputStream bistream = clazz.getResourceAsStream(fname);
// 			System.out.println("bistream="+bistream);
#endif
			DataInputStream distream = new DataInputStream(bistream);
// 			System.out.println("distream="+distream);
			return distream;
		}
		else {
#ifndef USE_JAVA_MOBILE
			// Open the ZIP file
			FileInputStream fistream = new FileInputStream(fname);
			ZipInputStream zistream = new ZipInputStream(fistream);

			// Get the first entry
			ZipEntry entry = zistream.getNextEntry();

			BufferedInputStream bistream = new BufferedInputStream(zistream);
			DataInputStream distream = new DataInputStream(bistream);

			return distream;
#else
			System.out.println("FHandler opening zipfile not supported!");
			return null;
#endif
		}
	}

	public static DataOutputStream getDataOutputStream(String fname) throws IOException {
		int dotPos=0;
		int dp = fname.indexOf(".");
		while(dp>0) { //NOTE: Java 1.4.2 does not have 'lastIndexOf'
			dotPos=dp;
			dp=fname.indexOf(".",dp+1);
		}
		String fext = fname.substring(dotPos);
		if ( !fext.equals(".zip") ) {
			// plain files
#ifndef USE_JAVA_MOBILE
			FileOutputStream fostream = new FileOutputStream(fname);
			BufferedOutputStream bostream = new BufferedOutputStream(fostream);
#else
			System.out.println("NonStatic.class.getResourceAsStream("+fname+");");
			Class clazz = Runtime.getRuntime().getClass();
			OutputStream bostream = clazz.getResourceAsStream(fname);
// 			System.out.println("bostream="+bostream);
#endif
			DataOutputStream dostream = new DataOutputStream(bostream);
// 			System.out.println("dostream="+dostream);
			return dostream;
		}
		else {
			System.out.println("FHandler opening zipfile not supported!");
			return null;
		}
	}

	/** @brief creates a buffered input stream from a resource file
	 *  it searches for the file in the root of the jar file if the
	 *  application is started from a jar file, else it will look
	 *  in the current directory
	 *  @arg filename Name of the file to get a stream of
	 *  @return the BufferedInputStream of that file
	 */
	public static final BufferedInputStream getResourceStream(String filename) throws IOException {
		Class clazz = fhinstance.getClass(); // workaround...
		InputStream fistream = clazz.getResourceAsStream(filename);
		BufferedInputStream bistream = new BufferedInputStream(fistream);
		return bistream;
	}
	
	/** returns the Bitstream Vera Sans Mono Font, normal style, size 12
	 *  first look for VeraMono.ttf in the current dir/jar file
	 *  then ask the system for the "Bitstream Vera Sans Mono" font
	 *  @return the Font
	 */
	public static final Font getVeraMonoFont() {
		try {
			InputStream bistream = getResourceStream("VeraMono.ttf");
			Font base = Font.createFont(Font.TRUETYPE_FONT, bistream);
			bistream.close();
			return base.deriveFont(0, 12);
		}
		catch (Exception e) {
			PRINTLN("Error while loading font, using fallback font");
			return new Font("Bitstream Vera Sans Mono",0, 12);
		}
	}

}
