#include "Global.inc"
#ifndef USE_JAVA_142
import javax.swing.*;
import javax.swing.event.*;
import java.awt.*;
import java.awt.event.*;
import java.util.Vector;
import java.net.*;
import java.io.*;
import java.awt.image.BufferedImage;

		class CPURunner implements Runnable {
			private volatile int threadStatus = 0;
			private Thread cpurunthread;
			// 0 means suspended
			// 1 means suspend->running requested
			// 2 means running
			// 3 means running->suspended requested
			synchronized public final void suspend() {
				while (threadStatus != 0) {
					threadStatus = 3;
					while (threadStatus == 3) { Thread.yield(); };
				}
			}

			synchronized public final void resume() {
				while (threadStatus != 2) {
					threadStatus = 1;
					while (threadStatus == 1) { Thread.yield(); };
				}
			}

			CPURunner() {
				cpurunthread = new Thread(this);
				cpurunthread.start();
				while (!cpurunthread.isAlive()) { Thread.yield(); }; // wait for thread to actually start
			}

			public void run() {
				while (true) {
					// suspended
					while (threadStatus == 0) { Thread.yield(); };
					// suspend -> running
					if (threadStatus == 1) threadStatus = 2;
					// running
					while ((threadStatus == 2) && (CPU.nextinstruction()!=0)) {};
					if (threadStatus == 2) threadStatus = 3; // CPU returned exception
					// running -> suspended
					if (threadStatus == 3) threadStatus = 0;
					// suspended
				}
			}
		}

public class swinggui implements ActionListener, ItemListener, KeyListener, ComponentListener {
		public static boolean RIGHT_TO_LEFT = false;
		private static DrawingArea grfx;
		private static Debugger dbgr;
		private static JMenuBar menubar;
		protected VideoController VC;
		protected CPU cpu;
		private int fps;
		private int selectedState = 0;
		Vector osdLines = new Vector();
		Vector rcFiles = new Vector();
		int osdTime = 0;
		String curcartname;
		JMenuItem menuitemExit;
		JMenuItem menuitemScale1x;
		JMenuItem menuitemScale2x;
		JMenuItem menuitemScale3x;
		JMenuItem menuitemOpenROM;
		JMenuItem menuitemSaveState;
		JMenuItem menuitemLoadState;
		JMenuItem menuitemIncFrameSkip;
		JMenuItem menuitemDecFrameSkip;
		JMenuItem menuitemSoundEnable;
		JMenuItem menuitemSoundDisable;
		JMenuItem menuitemSoundToggle;
		JMenuItem[] menuitemSelectState;
		JMenuItem menuitemSeparator;

  	JMenuItem[] menuItems;

		CPURunner cpuRunner;

		public void updateCartName(String fname) {
			int slashPos = fname.lastIndexOf(File.separator);
			int dotPos = fname.lastIndexOf(".");
			if (dotPos == -1) dotPos = fname.length()+1;

			curcartname = fname.substring(slashPos+1, dotPos);
			System.out.println("cartname = " + curcartname);

			rcFiles.remove(fname);
			rcFiles.insertElementAt(fname, 0);
			saveRCFiles();
		}

		public class DrawingArea extends JPanel{
			VideoController VC;
			public DrawingArea(VideoController vc) {
			super();
			VC=vc;
			}
			public void paintComponent(Graphics g) {
				super.paintComponent(g);
				g.drawImage(cpu.VC.getImage(),0,0, this);
				if (osdTime > 0) {
					g.setColor(new Color(255,255,255));
					--osdTime;
					if ((osdTime == 0) && (osdLines.size()>0)){
						osdLines.remove(0);
						osdTime = 15;
					}
					for (int i = 0; i < osdLines.size(); ++i) {
						g.drawString((String)osdLines.elementAt(i), 10, 10+10*i);
					}
				}
				++fps;
    	}
		}

		public void addOSDLine(String line) {
			osdLines.add(line);
			osdTime = 200;
		}

		public swinggui() {
		}


		private JMenu menuFile;

		private JMenuBar createJMenuBar() {
			JMenuBar mainMenuBar;
			JMenu menuSettings;
			JMenu menuScaling;
			JMenu menuFrameSkip;
			JMenu menuState;
			JMenu menuSound;
			mainMenuBar = new JMenuBar();

			menuFile = new JMenu( "File" );
			menuFile.setMnemonic( KeyEvent.VK_F );
			mainMenuBar.add( menuFile );
			menuSettings = new JMenu( "Video" );
			menuSettings.setMnemonic( KeyEvent.VK_S );
			mainMenuBar.add( menuSettings );

			menuitemOpenROM = new JMenuItem("Open ROM", KeyEvent.VK_O);
			menuitemOpenROM.setAccelerator( KeyStroke.getKeyStroke( KeyEvent.VK_O, ActionEvent.CTRL_MASK ) );
			menuitemOpenROM.addActionListener( this );
			menuFile.add(menuitemOpenROM);
			menuitemExit = new JMenuItem( "Exit", KeyEvent.VK_X );
			menuitemExit.setAccelerator( KeyStroke.getKeyStroke( KeyEvent.VK_Q, ActionEvent.CTRL_MASK) );
			menuitemExit.addActionListener( this );
			menuFile.add( menuitemExit );

			menuScaling = new JMenu( "Scaling");
			menuitemScale1x = new JMenuItem( "Scale 1x", KeyEvent.VK_1 );
			menuitemScale2x = new JMenuItem( "Scale 2x", KeyEvent.VK_2 );
			menuitemScale3x = new JMenuItem( "Scale 3x", KeyEvent.VK_3 );
			menuitemScale1x.setAccelerator( KeyStroke.getKeyStroke( KeyEvent.VK_1, ActionEvent.CTRL_MASK ) );
			menuitemScale2x.setAccelerator( KeyStroke.getKeyStroke( KeyEvent.VK_2, ActionEvent.CTRL_MASK ) );
			menuitemScale3x.setAccelerator( KeyStroke.getKeyStroke( KeyEvent.VK_3, ActionEvent.CTRL_MASK ) );
			menuitemScale1x.addActionListener( this );
			menuitemScale2x.addActionListener( this );
			menuitemScale3x.addActionListener( this );
			menuScaling.add( menuitemScale1x );
			menuScaling.add( menuitemScale2x );
			menuScaling.add( menuitemScale3x );
			menuSettings.add( menuScaling) ;

			menuFrameSkip = new JMenu( "Frame Skipping");
			menuitemIncFrameSkip = new JMenuItem( "Increase Frame Skip", KeyEvent.VK_I );
			menuitemDecFrameSkip = new JMenuItem( "Decrease Frame Skip", KeyEvent.VK_D );
			menuitemIncFrameSkip.setAccelerator( KeyStroke.getKeyStroke( KeyEvent.VK_CLOSE_BRACKET, ActionEvent.CTRL_MASK ) );
			menuitemDecFrameSkip.setAccelerator( KeyStroke.getKeyStroke( KeyEvent.VK_OPEN_BRACKET, ActionEvent.CTRL_MASK ) );
			menuitemIncFrameSkip.addActionListener( this );
			menuitemDecFrameSkip.addActionListener( this );
			menuFrameSkip.add( menuitemIncFrameSkip );
			menuFrameSkip.add( menuitemDecFrameSkip );
			menuSettings.add( menuFrameSkip) ;

			menuState = new JMenu("State");
			menuitemSaveState = new JMenuItem( "Save State", KeyEvent.VK_S );
			menuitemLoadState = new JMenuItem( "Load State", KeyEvent.VK_L );
			menuitemSaveState.setAccelerator( KeyStroke.getKeyStroke( KeyEvent.VK_S, ActionEvent.CTRL_MASK ) );
			menuitemLoadState.setAccelerator( KeyStroke.getKeyStroke( KeyEvent.VK_L, ActionEvent.CTRL_MASK ) );
			menuitemSaveState.addActionListener( this );
			menuitemLoadState.addActionListener( this );
			menuState.add( menuitemSaveState );
			menuState.add( menuitemLoadState );
			//menuState.add( menuitemSeparator );
			menuitemSelectState = new JMenuItem[10];
			for (int i = 0; i < 10; ++i) {
				menuitemSelectState[i] = new JMenuItem( "Select State " + i, KeyEvent.VK_0 + i);
				menuitemSelectState[i].setAccelerator( KeyStroke.getKeyStroke( KeyEvent.VK_0 + i, 0));
				menuitemSelectState[i].addActionListener( this );
				menuState.add(menuitemSelectState[i]);
			}
			mainMenuBar.add( menuState) ;

			menuSound = new JMenu( "Sound");
			menuitemSoundEnable = new JMenuItem( "Enable Sound", KeyEvent.VK_E );
			menuitemSoundDisable = new JMenuItem( "Disable Sound", KeyEvent.VK_D );
			menuitemSoundToggle = new JMenuItem( "Toggle Sound", KeyEvent.VK_T );
			menuitemSoundToggle.setAccelerator( KeyStroke.getKeyStroke( KeyEvent.VK_A, ActionEvent.CTRL_MASK ) );
			menuitemSoundEnable.addActionListener( this );
			menuitemSoundDisable.addActionListener( this );
			menuitemSoundToggle.addActionListener( this );
			menuSound.add( menuitemSoundEnable );
			menuSound.add( menuitemSoundDisable );
			menuSound.add( menuitemSoundToggle );
			mainMenuBar.add( menuSound) ;

			return mainMenuBar;
		}

		public void addComponentsToPane( Container contentPane ) {
//      Use BorderLayout. Default empty constructor with no horizontal and vertical
//      gaps
			contentPane.setLayout( new BorderLayout( 5,5 ) );
			if ( !( contentPane.getLayout() instanceof BorderLayout ) ) {
				contentPane.add( new JLabel( "Container doesn't use BorderLayout!" ) );
				return;
			}

			if ( RIGHT_TO_LEFT ) {
				contentPane.setComponentOrientation(
				  java.awt.ComponentOrientation.RIGHT_TO_LEFT );
			}

			grfx=new DrawingArea( cpu.VC ); //doublebuffering
			grfx.setFocusable(true);
			grfx.addKeyListener(this);
			grfx.setDoubleBuffered(false);
			grfx.setPreferredSize( new Dimension( 160*cpu.VC.nscale, 144*cpu.VC.nscale ) ); //quadruple each pixel
			contentPane.add( grfx, BorderLayout.CENTER );
		}

		JFrame frame;

		private void createAndShowGUI() {
			//JFrame.setDefaultLookAndFeelDecorated( true );

			frame = new JFrame( "JGameBoy Emulator V0.01" );
			frame.setDefaultCloseOperation( JFrame.EXIT_ON_CLOSE );
// 			frame.setBounds( 60,60,100,100 );

			//Set up the content pane and add swing components to it
			frame.setJMenuBar( createJMenuBar() );
			addComponentsToPane( frame.getContentPane() );

			frame.addComponentListener(this);
			frame.setLocationRelativeTo(null);
			frame.setResizable(false);
			frame.pack();
			frame.setVisible( true );

		}

		public void componentHidden(ComponentEvent e) {}
		public void componentMoved(ComponentEvent e) {}
		public void componentShown(ComponentEvent e) {}

		public void componentResized(ComponentEvent e) {
		}

		public void actionPerformed( ActionEvent e ) {
/*				JMenuItem source = ( JMenuItem )( e.getSource() );
				String s = "Menu Item source: " + source.getText()
			           + " (an instance of " + getClassName( source ) + ")";
				System.out.println(s);*/
			if (e.getSource().equals( menuitemExit)) {
				System.exit(0);
			}
			else if (e.getSource().equals( menuitemScale1x )) {
				addOSDLine("Set scaling: Scale1x");
				VC.nscale = 1;
 				grfx.setPreferredSize( new Dimension( 160*cpu.VC.nscale, 144*cpu.VC.nscale ) ); //quadruple each pixel
				grfx.setSize( new Dimension( 160*cpu.VC.nscale, 144*cpu.VC.nscale ) ); //quadruple each pixel
				frame.pack();
			}
			else if (e.getSource().equals( menuitemScale2x )) {
				addOSDLine("Set scaling: Scale2x");
				VC.nscale = 2;
 				grfx.setPreferredSize( new Dimension( 160*cpu.VC.nscale, 144*cpu.VC.nscale ) ); //quadruple each pixel
				grfx.setSize( new Dimension( 160*cpu.VC.nscale, 144*cpu.VC.nscale ) ); //quadruple each pixel
				frame.pack();
			}
			else if (e.getSource().equals( menuitemScale3x )) {
				addOSDLine("Set scaling: Scale3x");
				VC.nscale = 3;
 				grfx.setPreferredSize( new Dimension( 160*cpu.VC.nscale, 144*cpu.VC.nscale ) ); //quadruple each pixel
				grfx.setSize( new Dimension( 160*cpu.VC.nscale, 144*cpu.VC.nscale ) ); //quadruple each pixel
				frame.pack();
			}
			else if (e.getSource().equals( menuitemIncFrameSkip )) {
				++VC.fskip;
				addOSDLine("Increased frameskip: "+VC.fskip);
			}
			else if (e.getSource().equals( menuitemDecFrameSkip )) {
				if (VC.fskip>1) --VC.fskip;
				addOSDLine("Decreased frameskip: "+VC.fskip);
			}
			else if (e.getSource().equals( menuitemSoundEnable )) {
				cpu.AC.isMuted = false;
				addOSDLine("Enabled sound");
			}
			else if (e.getSource().equals( menuitemSoundDisable )) {
				cpu.AC.isMuted = true;
				addOSDLine("Disabled sound");
			}
			else if (e.getSource().equals( menuitemSoundToggle )) {
				cpu.AC.isMuted = !cpu.AC.isMuted;
				addOSDLine(cpu.AC.isMuted ? "Disabled sound" : "Enabled sound");
			}
			else if(e.getSource().equals( menuitemOpenROM )) {
				JFileChooser fc = new JFileChooser(".");

				// Show open dialog; this method does not return until the dialog is closed
				fc.showOpenDialog(frame);
				File selFile = fc.getSelectedFile();
				if(selFile != null) {
					System.out.println(selFile.getAbsolutePath());

					cpuRunner.suspend();

					CPU.loadCartridge(new Cartridge(selFile.getAbsolutePath()));
					updateCartName(selFile.getAbsolutePath());
					addOSDLine("loaded Rom: " + curcartname);

					if (CPU.canRun())
						cpuRunner.resume();
				}
			}
			else if(e.getSource().equals( menuitemSaveState )) {
				if (!CPU.canRun()) return;
				cpuRunner.suspend();
				String stname = System.getProperty("user.home")+File.separator+ ".jgbe"+File.separator;
				File jgbedir=new File(stname);
				if(!jgbedir.exists()) if(!jgbedir.mkdir()) System.out.printf("failed!\n");
				stname += "savestates"+File.separator;
				File sstatedir=new File(stname);
				if(!sstatedir.exists()) if(!sstatedir.mkdir()) System.out.printf("failed!\n");
				if(sstatedir.exists()) {
					stname += curcartname + ".st" + selectedState;
					addOSDLine("Saving State "+selectedState);
					try {
						DataOutputStream dostream = FHandler.getDataOutputStream(stname);
						CPU.saveState(dostream);
						dostream.close();
					}
					catch (java.io.IOException ioe) {
						System.out.println("Error saving state! ");
					};
				}
				cpuRunner.resume();
			}
			else if(e.getSource().equals( menuitemLoadState )) {
				if (!CPU.canRun()) return;
				cpuRunner.suspend();
				String stname = System.getProperty("user.home")+File.separator+".jgbe"+File.separator+"savestates"+File.separator + curcartname + ".st" + selectedState;
				addOSDLine("Loading State "+selectedState);
				try {
					DataInputStream distream = FHandler.getDataInputStream(stname);
					CPU.loadState(distream);
					distream.close();
				}
				catch (java.io.IOException ioe) {
					System.out.println("Error loading state! " + ioe.getMessage());
				};
				cpuRunner.resume();
			}
			else {
				for (int i = 0; i < 10; ++i) {
					if (e.getSource().equals(menuitemSelectState[i])) {
						selectedState = i;
						addOSDLine("Selected State "+selectedState);
						return;
					}
				}
				if(menuItems!=null)
					for (int i = 0; i < menuItems.length; ++i) {
						if (e.getSource().equals(menuItems[i])) {
							//System.out.println(menuItems[i].getText());

						if(cpuRunner!=null) cpuRunner.suspend();

						CPU.loadCartridge(new Cartridge((String)rcFiles.elementAt(i)));
						updateCartName((String)rcFiles.elementAt(i));
						addOSDLine("loaded Rom: " + curcartname);

						if (CPU.canRun())
							if(cpuRunner!=null) cpuRunner.resume();
					}
				}
				//System.out.println("timer!");
				frame.setTitle("" + fps + " - JGameBoy Emulator V0.01");
				//cpu.AC.srendered = 0;
				fps = 0;
			}
			if(dbgr != null) dbgr.update();
		}

		public void itemStateChanged( ItemEvent e ) {
			JMenuItem source = ( JMenuItem )( e.getSource() );
			String s = "Menu Item source: " + source.getText()
			           + " (an instance of " + getClassName( source ) + ")"
			           + "\n"
			           + "    State of check Box: "
			           + (( e.getStateChange() == ItemEvent.SELECTED ) ?
			              "selected":"unselected" );
			System.out.println( s );
		}

		public void keyTyped(KeyEvent e) {
			//System.out.println("keyTyped");
		}

		public void keyPressed(KeyEvent e) {
			int oldButtonKeyStatus=cpu.ButtonKeyStatus;
			int oldDirectionKeyStatus=cpu.DirectionKeyStatus;
			switch(e.getKeyCode()){
				case KeyEvent.VK_Z:
					cpu.ButtonKeyStatus&=~1; // A
					break;
				case KeyEvent.VK_X:
					cpu.ButtonKeyStatus&=~2; // B
					break;
				case KeyEvent.VK_MINUS:
					cpu.ButtonKeyStatus&=~4; // Select
					break;
				case KeyEvent.VK_EQUALS:
					cpu.ButtonKeyStatus&=~8; // Start
					break;
				case KeyEvent.VK_RIGHT:
					cpu.DirectionKeyStatus&=~1; // Right
					break;
				case KeyEvent.VK_LEFT:
					cpu.DirectionKeyStatus&=~2; // Left
					break;
				case KeyEvent.VK_UP:
					cpu.DirectionKeyStatus&=~4; // Up
					break;
				case KeyEvent.VK_DOWN:
					cpu.DirectionKeyStatus&=~8; // Down
					break;
				default:
					//System.out.println("keyPressed");
					break;
			}
			if((oldButtonKeyStatus!=cpu.ButtonKeyStatus)|(cpu.DirectionKeyStatus!=oldDirectionKeyStatus))
				cpu.triggerInterrupt(4);
		}
		public void keyReleased(KeyEvent e) {
			int oldButtonKeyStatus=cpu.ButtonKeyStatus;
			int oldDirectionKeyStatus=cpu.DirectionKeyStatus;
			switch(e.getKeyCode()){
				case KeyEvent.VK_Z:
					cpu.ButtonKeyStatus|=1; // A
					break;
				case KeyEvent.VK_X:
					cpu.ButtonKeyStatus|=2; // B
					break;
				case KeyEvent.VK_MINUS:
					cpu.ButtonKeyStatus|=4; // Select
					break;
				case KeyEvent.VK_EQUALS:
					cpu.ButtonKeyStatus|=8; // Start
					break;
				case KeyEvent.VK_RIGHT:
					cpu.DirectionKeyStatus|=1; // Right
					break;
				case KeyEvent.VK_LEFT:
					cpu.DirectionKeyStatus|=2; // Left
					break;
				case KeyEvent.VK_UP:
					cpu.DirectionKeyStatus|=4; // Up
					break;
				case KeyEvent.VK_DOWN:
					cpu.DirectionKeyStatus|=8; // Down
					break;
				default:
					//System.out.println("keyReleased" + e.getKeyCode());
					break;
			}
		if((oldButtonKeyStatus!=cpu.ButtonKeyStatus)|(cpu.DirectionKeyStatus!=oldDirectionKeyStatus))
			cpu.triggerInterrupt(4);
		}

		public void makeRcFilesMenuItems() {

			if (menuFile != null) {
				while (menuFile.getItemCount() > 2) {
					menuFile.remove(2);
				}

				menuItems = new JMenuItem[rcFiles.size()];

				menuFile.addSeparator();

				for (int i = 0; i < rcFiles.size(); ++i) {
					String lname = (String)rcFiles.get(i);
					String name = lname.substring(lname.lastIndexOf(File.separator) + 1);
					menuItems[i] = new JMenuItem(name);
					menuFile.add(menuItems[i]);
					menuItems[i].addActionListener(this);
				}
			}

		}


		// Returns the class name, no package info
		protected static String getClassName( Object o ) {
			String classString = o.getClass().getName();
			int dotIndex = classString.lastIndexOf( "." );
			return classString.substring( dotIndex+1 );	//Returns only Class name
		}

		public void loadRCFiles() {
			try {
				String rcfilename = System.getProperty("user.home")+File.separator+".jgbe"+File.separator+"rcfiles.log";
				BufferedReader in = new BufferedReader(new FileReader(rcfilename));
				String str;
				rcFiles.clear();
				while ((str = in.readLine()) != null) {
						rcFiles.add(str);
				}
				in.close();
			} catch (IOException e) {
				System.out.println("error reading rcfiles.log");
			}
		}

		public void saveRCFiles() {
			try {
				String rcfilename = System.getProperty("user.home")+File.separator+".jgbe"+File.separator+"rcfiles.log";
				BufferedWriter out = new BufferedWriter(new FileWriter(rcfilename));
				String str;
				int num = MIN(10, rcFiles.size());
				for (int i = 0; i < num; ++i) {
					str = (String)rcFiles.elementAt(i);
					out.write(str, 0, str.length());
					out.newLine();
				}
				out.close();
			} catch (IOException e) {
				System.out.println("error writing rcfiles.log");
			}
			makeRcFilesMenuItems();
		}

		public static void main( String[] args ) {
			final swinggui gui=new swinggui();
			Cartridge cart = null;

			gui.loadRCFiles();

			boolean sound=true, debug=true;
			String romfile="", logfile="";
			for (int i = 0; i < args.length; ++i) {
				if (args[i].charAt(0)!='-')
					romfile = args[i];
				if (args[i].equals("-log"))
					logfile = args[++i];
				if (args[i].equals("-nosound"))
					sound = false;
				if (args[i].equals("-nodebug"))
					debug = false;
				if ((args[i].equals("-lastcart")) && (gui.rcFiles.size() > 0))
					romfile = (String)gui.rcFiles.elementAt(0);
			}
			if (!romfile.equals("")) {
				cart = new Cartridge(romfile);
				if(cart.getError()!=null) {
					System.out.println("ERROR: "+cart.getError());
					cart = null;
				}
				else {
					gui.updateCartName(romfile);
					System.out.println("Succesfully loaded ROM :)");
				}
			}

			gui.cpu = new CPU();
			gui.VC = gui.cpu.VC;

			gui.createAndShowGUI();
			gui.cpu.VC.addListener(gui.grfx);
			if (!sound)
				gui.cpu.AC.isMuted = true;

			Timer timer = new Timer(1000, gui);
			timer.setInitialDelay(1000);
			timer.start();

			if (cart != null)
				gui.cpu.loadCartridge(cart);

			/*DEBUGGER*/
			if (debug) {
				dbgr=new Debugger(gui, logfile); //The GUI to which this debugger belongs
			}
			else {
				gui.cpuRunner = new CPURunner();
				if (CPU.canRun())
					gui.cpuRunner.resume();
			}

			gui.makeRcFilesMenuItems();
		}
	}
#endif
