/*
 *  IMPORTANT: THIS FILE IS AUTOGENERATED
 *
 *  Any modifications to this file will be lost when regenerating it.
 *  Modify the corresponding .jpp file instead, and regenerate this file.
 */

import javax.swing.*;
import javax.swing.event.*;
import java.awt.*;
import java.awt.event.*;
import java.util.LinkedList;
import java.net.*;
import java.awt.image.BufferedImage;

public class swinggui implements ActionListener, ItemListener, KeyListener, ComponentListener {
  public static boolean RIGHT_TO_LEFT = false;
  private static DrawingArea grfx;
  private static JMenuBar menubar;
  protected VideoController VC;
  protected Cartridge cartridge;
  protected CPU cpu;
  private int fps;

  public class DrawingArea extends JPanel{
   VideoController VC;
   public DrawingArea(VideoController vc) {
   super();
   VC=vc;
   }
   public void paintComponent(Graphics g) {
    super.paintComponent(g);
    g.drawImage(cpu.VC.getImage(),0,0, this);
    ++fps;
     }
  }

  public swinggui() {
  }

  private JMenuBar createJMenuBar() {
   JMenuBar mainMenuBar;
   JMenu menuFile;
   JMenuItem menuitemExit;
   mainMenuBar = new JMenuBar();

   menuFile = new JMenu( "File" );
   menuFile.setMnemonic( KeyEvent.VK_F );
   mainMenuBar.add( menuFile );


   menuitemExit = new JMenuItem( "Exit", KeyEvent.VK_X );


   menuitemExit.setAccelerator( KeyStroke.getKeyStroke( KeyEvent.VK_1, ActionEvent.ALT_MASK ) );
   menuitemExit.addActionListener( this );
   menuFile.add( menuitemExit );
   return mainMenuBar;
  }

  public void addComponentsToPane( Container contentPane ) {


   contentPane.setLayout( new BorderLayout( 5,5 ) );
   if ( !( contentPane.getLayout() instanceof BorderLayout ) ) {
    contentPane.add( new JLabel( "Container doesn't use BorderLayout!" ) );
    return;
   }

   if ( RIGHT_TO_LEFT ) {
    contentPane.setComponentOrientation(
      java.awt.ComponentOrientation.RIGHT_TO_LEFT );
   }

   grfx=new DrawingArea( cpu.VC );
   grfx.setFocusable(true);
   grfx.addKeyListener(this);
   grfx.setPreferredSize( new Dimension( 160*cpu.VC.scale, 144*cpu.VC.scale ) );
   contentPane.add( grfx, BorderLayout.CENTER );
  }

  JFrame frame;

  private void createAndShowGUI() {
   JFrame.setDefaultLookAndFeelDecorated( true );

   frame = new JFrame( "JGameBoy Emulator V0.01" );
   frame.setDefaultCloseOperation( JFrame.EXIT_ON_CLOSE );
   frame.setBounds( 60,60,100,100 );


   frame.setJMenuBar( createJMenuBar() );
   addComponentsToPane( frame.getContentPane() );

   frame.addComponentListener(this);
   frame.setLocationRelativeTo(null);

   frame.pack();
   frame.setVisible( true );

  }

  public void componentHidden(ComponentEvent e) {}
  public void componentMoved(ComponentEvent e) {}
  public void componentShown(ComponentEvent e) {}

  public void componentResized(ComponentEvent e) {
   cpu.VC.scale(e.getComponent().getWidth() - 10,
                e.getComponent().getHeight() - 55);
   System.out.println("Window resized");
  }

  public void actionPerformed( ActionEvent e ) {




   frame.setTitle("" + fps + " - JGameBoy Emulator V0.01");

   fps = 0;
  }

  public void itemStateChanged( ItemEvent e ) {
   JMenuItem source = ( JMenuItem )( e.getSource() );
   String s = "Menu Item source: " + source.getText()
              + " (an instance of " + getClassName( source ) + ")"
              + "\n"
              + "    State of check Box: "
              + (( e.getStateChange() == ItemEvent.SELECTED ) ?
                 "selected":"unselected" );
   System.out.println( s );
  }

  public void keyTyped(KeyEvent e) {

  }

  public void keyPressed(KeyEvent e) {
   switch(e.getKeyCode()){
    case KeyEvent.VK_Z:
     cpu.ButtonKeyStatus&=~1;
     cpu.triggerInterrupt(4);
     break;
    case KeyEvent.VK_X:
     cpu.ButtonKeyStatus&=~2;
     cpu.triggerInterrupt(4);
     break;
    case KeyEvent.VK_MINUS:
     cpu.ButtonKeyStatus&=~4;
     cpu.triggerInterrupt(4);
     break;
    case KeyEvent.VK_EQUALS:
     cpu.ButtonKeyStatus&=~8;
     cpu.triggerInterrupt(4);
     break;
    case KeyEvent.VK_RIGHT:
     cpu.DirectionKeyStatus&=~1;
     cpu.triggerInterrupt(4);
     break;
    case KeyEvent.VK_LEFT:
     cpu.DirectionKeyStatus&=~2;
     cpu.triggerInterrupt(4);
     break;
    case KeyEvent.VK_UP:
     cpu.DirectionKeyStatus&=~4;
     cpu.triggerInterrupt(4);
     break;
    case KeyEvent.VK_DOWN:
     cpu.DirectionKeyStatus&=~8;
     cpu.triggerInterrupt(4);
     break;
    default:
     System.out.println("keyPressed");
     break;
    }
  }
  public void keyReleased(KeyEvent e) {
   switch(e.getKeyCode()){
    case KeyEvent.VK_Z:
     cpu.ButtonKeyStatus|=1;
     break;
    case KeyEvent.VK_X:
     cpu.ButtonKeyStatus|=2;
     break;
    case KeyEvent.VK_MINUS:
     cpu.ButtonKeyStatus|=4;
     break;
    case KeyEvent.VK_EQUALS:
     cpu.ButtonKeyStatus|=8;
     break;
    case KeyEvent.VK_RIGHT:
     cpu.DirectionKeyStatus|=1;
     break;
    case KeyEvent.VK_LEFT:
     cpu.DirectionKeyStatus|=2;
     break;
    case KeyEvent.VK_UP:
     cpu.DirectionKeyStatus|=4;
     break;
    case KeyEvent.VK_DOWN:
     cpu.DirectionKeyStatus|=8;
     break;
    default:
     System.out.println("keyReleased" + e.getKeyCode());
     break;
    }
  }



  protected static String getClassName( Object o ) {
   String classString = o.getClass().getName();
   int dotIndex = classString.lastIndexOf( "." );
   return classString.substring( dotIndex+1 );
  }

  public static void main( String[] args ) {
   final swinggui gui=new swinggui();

   boolean sound=true, debug=true;
   String romfile="", logfile="";
   for (int i = 0; i < args.length; ++i) {
    if (args[i].charAt(0)!='-')
     romfile = args[i];
    if (args[i].equals("-log"))
     logfile = args[++i];
    if (args[i].equals("-nosound"))
     sound = false;
    if (args[i].equals("-nodebug"))
     debug = false;
   }
   if (romfile.equals("")) {
    System.out.println();
    System.out.println("ERROR: missing argument");
    System.out.println();
    System.out.println("USAGE: java swinggui ROMFILE [-log LOGFILE] [-nosound] [-nodebug]");
    System.out.println();
    return;
   }

   gui.cartridge = new Cartridge(romfile);
   if(gui.cartridge.getError()!=null) {
    System.out.println("ERROR: "+gui.cartridge.getError());
    return;
   }

   System.out.println("Succesfully loaded ROM :)");
   gui.cpu = new CPU(gui.cartridge);
   gui.VC = gui.cpu.VC;

   gui.createAndShowGUI();
   gui.cpu.reset();
   gui.cpu.VC.addListener(gui.grfx);
   if (!sound)
    gui.cpu.AC.isMuted = true;

   Timer timer = new Timer(1000, gui);
   timer.setInitialDelay(1000);
   timer.start();



   if (debug) {
    final Debugger dbgr=new Debugger(gui, logfile);
   }
   else {
    while (gui.cpu.nextinstruction()!=0) {};
   }
  }
 }
