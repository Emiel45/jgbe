#ifdef USE_JAVA_MOBILE

#include "Global.inc"
#include "SaveLoad.inc"

public final class MobileVideoController {
	private static final int MIN_WIDTH  = 160;
	private static final int MIN_HEIGHT = 144;

	private static int curDrawImg = 0;

	private int CurrentVRAMBank=0;
	protected static int VRAM[]=new int[0x4000]; //8k per bank, 2 banks, flattened;
	protected static int OAM[] =new int[0xa0];   //Sprite Attribute Table;

	protected static boolean isCGB;

	//Note: all these variables are actually initialised in reset()
	protected static int LY=0;
	protected static int LYC=0;
	protected static int SCX=0;
	protected static int SCY=0;
	protected static int WX=0;
	protected static int WY=0;
	protected static int LCDC=0;
	protected static int STAT=0;
	private static int LCDCcntdwn=0;

	protected static int curBGY;
	protected static int curWNDY;

	protected int[][][] Scalerx4 = new int[0x100][4][4];

	// Looks a lot like Origional Gameboy
	private static final int GRAYSHADES[][] = { {0xa0, 0xe0, 0x20},   // WHITE
	                                            {0x70, 0xb0, 0x40},   // LIGHTGRAY
	                                            {0x40, 0x70, 0x32},   // DARKGRAY
	                                            {0x10, 0x50, 0x26} }; // BLACK

	private int GrayColors[][][] = { GRAYSHADES, GRAYSHADES, GRAYSHADES };

	protected int BGPI=0;              //BCPS/BGPI - CGB Mode Only - Background Palette Index
	private int BGPD[]=new int[8*4*2]; //BCPD/BGPD - CGB Mode Only - Background Palette Data

	protected int OBPI=0;              //OCPS/OBPI - CGB Mode Only - Sprite Palette Index
	private int OBPD[]=new int[8*4*2]; //OCPD/OBPD - CGB Mode Only - Sprite Palette Data

	/* caching vars */

	#define BLITPIXTYPE int[]
	//0.88888888888888888888888888888889
	//private static int blitImg[][][] = new int[144][160][3]; // [y][x]
	public static int[] blitImg = new int[128*160];
	private static int palColors[] = new int[8*4*2];

	private CPU cpu; // dont think we need this... //yes we do, we need interrupts

	private long pfreq;
	private long ptick;
	private long ftick;

	private static int scale = 3;
	public static int nscale = 3;
	private static int cfskip = 0;
	public static int fskip = 4; // 1 is off
	public static boolean MixFrames; // Mix together last N frames
	public boolean allow_writes_in_mode_2_3=false;

/*
	public void setGrayShade(int i, int j, Color c) {
		GrayColors[i][j][0] = c.getRed();
		GrayColors[i][j][1] = c.getGreen();
		GrayColors[i][j][2] = c.getBlue();
		updateMonoColData(0); //???
		updateMonoColData(1);
		updateMonoColData(2);
	}
*/
	/* NOTE: Do not use 'clone', for it creates a 'shallow' copy when used
	 *       with 2d arrays, meaning that sub-arrays are still shared.
	 * TODO: Make this a proper function
	 */
	#define unshallowCloneInto(x, y) { \
		y = new int[4][3]; \
		for(int abc=0; abc<4; ++abc) \
			for(int bca=0; bca<3; ++bca) \
				y[abc][bca]=x[abc][bca]; \
	}

	public void setGrayShades(int[][] g) {
		unshallowCloneInto(g, GrayColors[0]);
		unshallowCloneInto(g, GrayColors[1]);
		unshallowCloneInto(g, GrayColors[2]);
		updateMonoColData(0); //???
		updateMonoColData(1);
		updateMonoColData(2);
	}

	public void setGrayShades(int[][] g1, int[][] g2, int[][] g3) {
		unshallowCloneInto(g1, GrayColors[0]);
		unshallowCloneInto(g2, GrayColors[1]);
		unshallowCloneInto(g3, GrayColors[2]);
		updateMonoColData(0); //???
		updateMonoColData(1);
		updateMonoColData(2);
	}

	public int[][] getGrayShade(int i) {
		return GrayColors[i];
	}

	public void restart() { // LCD off -> on
		LY=0;
		STAT=STAT&0xFC;//*KIGB=0x85(?)*/0x85 /*used to be: 0x04*/; // FF41 - STAT - LCDC Status (R/W) // LY==LYC bit set
		STAT_statemachine_state=0;
		LCDCcntdwn=80;
	}

	public void reset() {
		CurrentVRAMBank=0;
		LY=0;
		LYC=0;
		SCX=0;
		SCY=0;
		WX=0;
		WY=0;
		LCDC=CPU.BIOS_enabled?0x00:0x91; // init with screen on, tile data from 8000-8FFF, bg active
		STAT=/*KIGB=0x85(?)*/0x85 /*used to be: 0x04*/; // FF41 - STAT - LCDC Status (R/W) // LY==LYC bit set
		STAT_statemachine_state=0;
		LCDCcntdwn=80;

		BGPI=0;              //BCPS/BGPI - CGB Mode Only - Background Palette Index
		OBPI=0;              //OCPS/OBPI - CGB Mode Only - Sprite Palette Index
		for(int i=0; i<1024; ++i) {
			//patdirty[i]=true;
		}

		for (int i = 0; i < 0x20; ++i) {
			OBPD[i*2] = OBPD[i*2+1] = 0;
			BGPD[i*2] = BGPD[i*2+1] = 0;
			updateBGColData(i);
			updateOBColData(i);
		};
		updateMonoColData(0);
		updateMonoColData(1);
		updateMonoColData(2);

		for (int i = 0; i < 0xa0; ++i)
			OAM[i] = 0;
		for (int i = 0; i < 0x4000; ++i)
			VRAM[i] = 0;
	}

	public MobileVideoController(CPU cpu, int image_width, int image_height) {
		this.cpu = cpu;
#ifndef USE_JAVA_MOBILE
		drawImg=new Image[2];
#endif
		scale();
		reset(); // Initialise all variables
	}


	SAVELOAD_FUNCTION {
		SL_INT(CurrentVRAMBank);
		SL_ARR(UINT8, VRAM, 0x4000);
		SL_ARR(UINT8, OAM, 0xa0);

		//SL_BOOL(isCGB); should be correct already

		SL_UINT8(LY);
		SL_UINT8(LYC);
		SL_UINT8(SCX);
		SL_UINT8(SCY);
		SL_UINT8(WX);
		SL_UINT8(WY);
		SL_UINT8(LCDC);
		SL_IF_VERSION(15, -1) {
			SL_INT(LCDCcntdwn);
			SL_INT(mode3duration);
		}
		SL_IF_VERSION(18, -1) {
			SL_INT(STAT_statemachine_state);
		}
		SL_UINT8(STAT);
		SL_IF_VERSION(-1, 17) {
			// OLD savestates may crash JGBE (currently, savestate version 18),
			// this probably fuxx0rs timing, but should prevent crashes
			switch(STAT&3) {
				case 0:
					LCDCcntdwn=204;
					STAT_statemachine_state=2;
					break;
				case 1:
					LCDCcntdwn=0;
					STAT_statemachine_state=3;
					break;
				case 2:
					LCDCcntdwn=80;
					STAT_statemachine_state=0;
					break;
				case 3:
					LCDCcntdwn=172;
					STAT_statemachine_state=1;
					break;
			}
		}

		SL_UINT8(BGPI);
		SL_ARR(UINT8, BGPD, 8*4*2);

		SL_UINT8(OBPI);
		SL_ARR(UINT8, OBPD, 8*4*2);

		SL_IF_VERSION(8, -1) SL_UINT8(curWNDY);

		if (SL_LOAD) {
			for(int i=0; i<1024; ++i) {
				//patdirty[i]=true;
			}
			//anydirty = true;
			for (int i = 0; i < 0x20; ++i) {
				updateBGColData(i);
				updateOBColData(i);
			};
			updateMonoColData(0);
			updateMonoColData(1);
			updateMonoColData(2);
		}
	}

	static IVideoListener listener = null;

	public void addListener(IVideoListener vl) {

		listener = vl; // only 1 listener at a time currently :-p
		this.scale();
	}

	private static void scale() {
		scale = nscale;
		int width = scale*MIN_WIDTH;
		int height = scale*MIN_HEIGHT;
#ifndef USE_JAVA_MOBILE
		drawImg[0]=new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
		drawImg[1]=new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
#endif
	}

#ifndef USE_JAVA_MOBILE
	public static Image getImage() {
		return drawImg[curDrawImg]; // display image not being drawn to
	}
#endif

	private void palChange(int palcol, int r, int g, int b) {
		palColors[palcol] = ((r<<16)|(g<<8)|(b<<0));
	}

#define DRAWPIX(x, pal, col) { \
	blitImg[((159 - x) * 128) + ((int) LY * 128 / 144)] = palColors[pal | col]; \
} \

/*
		for (int x = 0; x < 160; ++x) {
			for (int y = 0; y < 144; ++y) {
				int ry = (int) y * 128 / 144;
				int rx = 159 - x;
				int idx = (rx * 128) + ry;
				//PRINTLN("x:" + x + "  y:"+y+"  rx:"+rx+"  ry:"+ry+"  i:"+idx);
				blitImg[idx] = (x << 8) + y;
				//for (int i = 0; i < imgarr.length; ++i)
				//	imgarr[i] = (i) * 0x010101;//Math.abs( random.nextInt() ) & 0xffffff;
			}
		}
		*/

/* Note: see http://www.compuphase.com/graphic/scale3.htm */
#define AVERAGE(a, b)   ( ((((a) ^ (b)) & 0xfffefefe) >> 1) + ((a) & (b)) )


	static long lastms;
	private static void blitImage() {
		if (cfskip == 0) {
			listener.newVideoImage();
			cfskip = fskip-1;
		} else
			--cfskip;
	}

	public void updateMonoColData(int index) {
		// index = 0 -> FF47 - BGP - BG Palette Data (R/W) - Non CGB Mode Only
		// index = 1 -> FF48 - OBP0 - Object Palette 0 Data (R/W) - Non CGB Mode Only
		// index = 2 -> FF49 - OBP1 - Object Palette 1 Data (R/W) - Non CGB Mode Only

		if (isCGB) return;

		int [][] curColors = GrayColors[index];

		int value = CPU.read(index + 0xff47); // could fix this to hold those values ourselves..

		if (index==0) index= (0x20>>2);
		else --index;
		int temp[] = null;
		temp = curColors[(value>>0)&3]; palChange((index<<2) | 0, temp[0], temp[1], temp[2]);
		temp = curColors[(value>>2)&3]; palChange((index<<2) | 1, temp[0], temp[1], temp[2]);
		temp = curColors[(value>>4)&3]; palChange((index<<2) | 2, temp[0], temp[1], temp[2]);
		temp = curColors[(value>>6)&3]; palChange((index<<2) | 3, temp[0], temp[1], temp[2]);
	}

	public void setBGColData(int value) {
		BGPD[BGPI&0x3f] = value;
		int bnum = (BGPI & 0x3e) >> 1;
		updateBGColData(bnum);
		if ((BGPI&(1<<7))!=0)
			++BGPI;
	}

	public void updateBGColData(int bnum) {
		int base = bnum << 1;

		// calculate color now
		int data = BGPD[base] | (BGPD[base+1]<<8);
		int palnum = base >> 3;
		int colnum = (base >> 1) & 3;
		int r = (data >>  0) & 0x1F;
		int g = (data >>  5) & 0x1F;
		int b = (data >> 10) & 0x1F;

		r <<= 3; r |= (r >> 5);
		g <<= 3; g |= (g >> 5);
		b <<= 3; b |= (b >> 5);
		// TODO gb->vga rgb conv
		// i think that was it... gnuboy doesnt seem
		// to do anything more and there it works
		// fading issue is somethere else, maybe int timing issue?

		palChange((palnum << 2) | colnum | 0x20, r, g, b);
	}

	public int getBGColData() {
		return BGPD[BGPI&0x3f];
	}

	public void setOBColData(int value) {
		OBPD[OBPI&0x3f] = value;
		int bnum = (OBPI & 0x3e) >> 1;
		updateOBColData(bnum);
		if ((OBPI&(1<<7))!=0)
			++OBPI;
	}

	public void updateOBColData(int bnum) {
		int base = bnum << 1;

		// calculate color now
		int data = OBPD[base] | (OBPD[base+1]<<8);
		int palnum = base >> 3;
		int colnum = (base >> 1) & 3;
		int r = (data >>  0) & 0x1F;
		int g = (data >>  5) & 0x1F;
		int b = (data >> 10) & 0x1F;

		r <<= 3; r |= (r >> 5);
		g <<= 3; g |= (g >> 5);
		b <<= 3; b |= (b >> 5);

		palChange((palnum << 2) | colnum, r, g, b);
	}

	public int getOBColData() {
		return OBPD[OBPI&0x3f];
	}


	/*****
	 * Note: Please refer to (and update) docs/notes_on_video_timing.txt when
	 * making changes to render()
	 *
	 * ps: Still not sure about what mode(s) to be in when LCD is off,
	 *     and neither do I know if we should generate any interrupts when
	 *     the LCD is off (if at all)
	 *
	 * ps:   Prehistorik Man does some funky shit at d600 (sub scanline render?).
	 ****/
	static int STAT_statemachine_state = 0;
	static int mode3duration = 0;
	public static void render(int cycles) { // Renders in real clock cycles
		ASSERT(cycles <= 6*4); // Longest instruction lasts 24 cycles, so we should get called at least that often
		LCDCcntdwn -= cycles;
		while (LCDCcntdwn <= 0) {
			switch (STAT_statemachine_state) {
				case 0: // currently in mode 2, switch to mode 3
						//Note: check if this can change before mode 3 (I think not -> Video memory should be locked)
						mode3duration = 172 + 10*getSpriteCountOnScanline(LY);

						LCDCcntdwn += mode3duration; // Mode 3 lasts longer depending on the nr of sprites on the scanline
						STAT = (STAT & 0xFC) | 3;
						++STAT_statemachine_state;
						renderScanLine(); //Test: What if the VC renders the BG internally in mode 2?
					break;
				case 1: // currently in mode 3, switch to mode 0
					LCDCcntdwn += (isCGB ? 376 : 372) - mode3duration; //mode 0 duration - mode 3 duration - hblank_dma
					STAT &= 0xFC; //switch to mode 0: STAT = (STAT & 0x7C) | 0;
					if ((STAT&(1<<3))!=0) CPU.triggerInterrupt(1);
					if (LY<144) CPU.elapseTime(CPU.hblank_dma());
					++STAT_statemachine_state;
// 					renderScanLine(); //Now renders in mode 2->3 transition
					break;
				case 2: // currently in mode 0, nearing the end, time to increase LY
					LY++;
					STAT = (STAT & (~(1 << 2))); // Unset LY==LYC
					LCDCcntdwn += (isCGB ? 0 : 4); // only 4 more cycles of mode 0 remain at this point
					++STAT_statemachine_state;
					break;
				case 3: // currently in mode 0, switch to mode [2 or 1]
					if (LY<144) { // switch to mode 2
						LCDCcntdwn += 80;
						STAT = (STAT & 0xFC) | 2;
						if (LY == LYC) {         // This is checked while changing to the new scanline
							STAT = STAT | (1 << 2);    // Set LY=LYC
							if ((STAT&(1<<6))!=0) {
								CPU.triggerInterrupt(1);
							}
							if ((STAT&(1<<5))!=0) CPU.triggerInterrupt(1);
						}
						STAT_statemachine_state=0;
					}
					else { // switch to mode 1
						STAT = (STAT & 0xFC) | 1;
						++STAT_statemachine_state;
						if((LCDC&0x80)!=0) CPU.triggerInterrupt(0);      //This appears to be required for SML2 (The Smurfs 1 still works)
						if ((STAT&(1<<4))!=0) CPU.triggerInterrupt(1);
						blitImage();
					}
					break;
				case 4: // currently in mode 1(VBlank), beginning of the scanline
					if (LY==LYC) {
						STAT = STAT | 4;       // Set LY=LYC (even for LY==153)
						if((STAT&(1<<6))!=0) {
							CPU.triggerInterrupt(1);
						}
					}
					if (LY==153) LY=0;
					LCDCcntdwn += (isCGB ? 456 : 452);       // end 4 cycles before the end so we can increase LY just before the next scanline
					++STAT_statemachine_state;
					break;
				case 5: // currently in mode 1(VBlank), nearing 'scanline' end
					LCDCcntdwn += (isCGB ? 0 : 4); // only 4 more cycles of this scanline remain at this point
					if (LY==0) { // We're on scanline 153, time for mode 2
						++STAT_statemachine_state;
					}
					else {       // Stay in VBlank
						++LY;
						STAT = (STAT & (~4)); // Unset LY==LYC
						--STAT_statemachine_state;
					}
					break;
				case 6: // Time to go to back to mode 2
					STAT = (STAT&0xfc) | 2;
					if ((STAT&(1<<5))!=0) CPU.triggerInterrupt(1);
					if ((LY==LYC)&&(STAT&(1<<6))!=0) {
						CPU.triggerInterrupt(1);
					}
					LCDCcntdwn += 80;
					STAT_statemachine_state = 0;
					break;
				default:
					ASSERT(false); //We should never get here!
					break;
			}
		}
		ASSERT(LCDCcntdwn > 0);
	}

	public int read(int index) {
		if(index<0x8000) {
			PRINTLN("Error: VideoController.read(): Reading from non VideoController-Address "+index);
		}
		else if(index < 0xa000) {
// 			return ((((STAT&3)!=3)||((LCDC&0x80)==0)) ? VRAM[index-0x8000+CurrentVRAMBank] : 0xff); // Optimized version
			if(((STAT&3)!=3)||((LCDC&0x80)==0)||allow_writes_in_mode_2_3) {                                                     // Debug version
				return VRAM[index-0x8000+CurrentVRAMBank];
			}
			else {
				PRINTLN("WARNING: Illegal read from VRAM while in mode "+(STAT&3));
				return 0xff;
			}
// 			return VRAM[index-0x8000+CurrentVRAMBank];                                              // Allow all version
		}
		else if(index<0xfe00) {
			PRINTLN("Error: VideoController.read(): Reading from non VideoController-Address "+index);
		}
		else if(index<0xfea0) {
// 			return ((((STAT&2)==0)||((LCDC&0x80)==0)) ? OAM[index-0xfe00] : 0xff);                  // Optimized version
			if(((STAT&2)==0)||((LCDC&0x80)==0)||allow_writes_in_mode_2_3) {                                                     // Allow all version
				return OAM[index-0xfe00];
			}
			else {
				PRINTLN("WARNING: Illegal read from OAM while in mode "+(STAT&3));
				return 0xff;
			}
// 			return OAM[index-0xfe00];                                                               // Debug version
		}
		else {
			PRINTLN("Error: VideoController.read(): Reading from non VideoController-Address "+index);
		}
		return VRAM[index+CurrentVRAMBank];
	}

	public void write(int index, int value) {
		if(index<0x8000) {
			PRINTLN("Error: VideoController.write(): Writing to non VideoController-Address "+index+" value="+value);
		}
		else if(index < 0xa000) {
			if(((STAT&3)!=3)||((LCDC&0x80)==0)||allow_writes_in_mode_2_3) {
				VRAM[index-0x8000+CurrentVRAMBank]=value;
				//patdirty[(CurrentVRAMBank>>4)+((index-0x8000)>>4)] = true; // nicked from gnuboy...
				//anydirty = true;
			}
			else {
				PRINTLN("WARNING: Ignoring writes to VRAM while in mode "+(STAT&3));
			}
		}
		else if(index<0xfe00) {
			PRINTLN("Error: VideoController.write(): Writing to non VideoController-Address "+index+" value="+value);
		}
		else if(index<0xfea0) {
			if(((STAT&2)==0)||((LCDC&0x80)==0)||allow_writes_in_mode_2_3) {
				OAM[index-0xfe00]=value;
 			}
 			else {
 				PRINTLN("WARNING: Ignoring writes to OAM while in mode "+(STAT&3));
 			}
		}
		else {
			PRINTLN("Error: VideoController.write(): Writing to non VideoController-Address "+index+" value="+value);
		}
	}

	public void selectVRAMBank(int i) {
		CurrentVRAMBank=i*0x2000;
		if ((i <0) || (i > 1))
			PRINTF("current offset=%x\n",CurrentVRAMBank);
	}

	public int getcurVRAMBank() {
		return CurrentVRAMBank/0x2000;
	}

	/* rendering of scanline starts here */
	// some global vars for render procedure
	// not thread-safe, who cares!
	private static int TileData;
	private static int BGTileMap;
	private static int WindowTileMap;
	private static int bgY;
	private static int bgTileY;
	private static int bgOffsY;
	private static int bgX;
	private static int bgTileX;
	private static int bgOffsX;
	private static int windX;
	private static int tilebufBG[] = new int[0x200]; // ? max here could be lower?
	private static BLITPIXTYPE[] blitLine;

#define DRAWPIX_S(x, pal, col) DRAWPIX(x, (pal << 2), col)

	public static void renderScanLine() {
		/* FF40 - LCDC - LCD Control (R/W)
		* Bit 7 - LCD Display Enable             (0=Off, 1=On)
		* Bit 6 - Window Tile Map Display Select (0=9800-9BFF, 1=9C00-9FFF)
		* Bit 5 - Window Display Enable          (0=Off, 1=On)
		* Bit 4 - BG & Window Tile Data Select   (0=8800-97FF, 1=8000-8FFF)
		* Bit 3 - BG Tile Map Display Select     (0=9800-9BFF, 1=9C00-9FFF)
		* Bit 2 - OBJ (Sprite) Size              (0=8x8, 1=8x16)
		* Bit 1 - OBJ (Sprite) Display Enable    (0=Off, 1=On)
		* Bit 0 - BG Display (for CGB see below) (0=Off, 1=On)
		*/
		if (cfskip != 0) return;

		if((LCDC&(1<<7))!=0) { //LCD enabled
			TileData = ((LCDC&(1<<4))==0) ? 0x0800 : 0x0000;
			BGTileMap = ((LCDC&(1<<3))==0) ? 0x1800 : 0x1c00;
			WindowTileMap = ((LCDC&(1<<6))==0) ? 0x1800 : 0x1c00;

			/* When Bit 0 is cleared, the background and window lose their priority - the sprites will be always
			 * displayed on top of background and window, independently of the priority flags in OAM and BG Map
			 * attributes.
			 */
			int BGPrio = (LCDC&(1<<0)); // ok dunno what exactly this does atm

			windX = 160;
			if(((LCDC&(1<<5))!=0)			 //window display enabled
			&& (WX >= 0) && (WX < 167) // yes this is 160+7
			&& (WY >= 0) && (WY < 144)
			&& (LY >= WY))
				windX = (WX - 7);         // [-8 < wndX < 160]

			renderScanlineBG();

			if (windX < 160) { // window doesnt have height, width
				renderScanlineWindow();
			}

			if((LCDC&(1<<1))!=0) { // sprites enabled
				renderScanlineSprites();
			}
		}
	}

	//private int lbgTileY = -1;

	private static void calcBGTileBuf() {
		/*	not really 100% correct...
				if (lbgTileY==bgTileY)
			return;
		lbgTileY=bgTileY;
		*/
		int tileMap = BGTileMap + bgTileX + (bgTileY*32);
		int attrMap = tileMap + 0x2000;
		int bufMap = 0;
		int cnt = ((windX+7) >> 3) + 1;

		for (int i = 0; i < cnt; ++i) {
			int tile = VRAM[tileMap++];
			int attr = VRAM[attrMap++];
			if (TileData == 0x0800) {
				tile ^= 0x80;
				tile += 0x80;
			}
			tilebufBG[bufMap++] = tile |
			 ((attr & 0x08) << 6) |              // bank select
			 ((attr & 0x60) << 5);               // horiz/vert flip
			tilebufBG[bufMap++] = ((attr&7) | 0x08) << 2; // pal select
			if ((tileMap&31)==0) { //if ((attrMap&31)==0)
				tileMap -= 32;
				attrMap -= 32;
			}
		}
	}

	private static void renderScanlineBG() {
		int bufMap = 0;
		int cnt = windX;
		if (cnt == 0) return;


		bgY     = (SCY+LY)&0xFF;
		bgTileY = bgY >> 3;
		bgOffsY = bgY & 7;
		bgX     = SCX; // it wraps, too
		bgTileX = bgX >> 3; // tile x
		bgOffsX = bgX & 7; // x offs

		calcBGTileBuf();

		int TileNum = tilebufBG[bufMap++];
		int TilePal = tilebufBG[bufMap++];
		int vr1 = VRAM[(TileNum*16) + (bgOffsY*2) + 0];
		int vr2 = VRAM[(TileNum*16) + (bgOffsY*2) + 1];

		#define PATLINE(x) (((vr1>>(7-(x)))&1) | (((vr2>>(7-(x)))&1) << 1))

		int curX = 0;

		for (int t = bgOffsX; t < 8; ++t, --cnt)
			DRAWPIX(curX++, TilePal, PATLINE(t));

		if (cnt == 0) return;

		while (cnt>=8) {
			TileNum = tilebufBG[bufMap++];
			TilePal = tilebufBG[bufMap++];
			vr1 = VRAM[(TileNum*16) + (bgOffsY*2) + 0];
			vr2 = VRAM[(TileNum*16) + (bgOffsY*2) + 1];
			for (int t = 0; t < 8; ++t)
				DRAWPIX(curX++, TilePal, PATLINE(t));
			cnt -= 8;
		}
		TileNum = tilebufBG[bufMap++];
		TilePal = tilebufBG[bufMap++];
		vr1 = VRAM[(TileNum*16) + (bgOffsY*2) + 0];
		vr2 = VRAM[(TileNum*16) + (bgOffsY*2) + 1];
		for (int t = 0; cnt > 0; --cnt, ++t)
			DRAWPIX(curX++, TilePal, PATLINE(t));
	}

	private static void calcWindTileBuf() {
		int tileMap = WindowTileMap + (bgTileY*32);
		int attrMap = tileMap + 0x2000;
		int bufMap = 0;
		int cnt = ((160-(windX+7)) >> 3) + 2;

		for (int i = 0; i < cnt; ++i) {
			int tile = VRAM[tileMap++];
			//PRINTF("attrMap=0x%04x, tilemap=0x%04x, WindowTileMap=0x%04x, bgTileY=0x%04x\n", attrMap, tileMap, WindowTileMap, bgTileY);
			int attr = VRAM[attrMap++];
			if (TileData == 0x0800) {
				tile ^= 0x80;
				tile += 0x80;
			}
			tilebufBG[bufMap++] = tile |
			 ((attr & 0x08) << 6) |              // bank select
			 ((attr & 0x60) << 5);               // horiz/vert flip
			tilebufBG[bufMap++] = ((attr&7) | 0x8) << 2; // pal select
			if ((tileMap&31)==0) { //if ((attrMap&31)==0)
				tileMap -= 32;
				attrMap -= 32;
			}
		}
	}

	private static void renderScanlineWindow() {
		int bufMap = 0;
		int curX = MAX(windX,0);
		int cnt = 160-curX;
		if (cnt == 0)
			return;
		bgY     = curWNDY++;
		bgTileY = bgY >> 3;
		bgOffsY = bgY & 7;

		bgOffsX = curX - windX;

		calcWindTileBuf();

		int TileNum = tilebufBG[bufMap++];
		int TilePal = tilebufBG[bufMap++];
		int vr1 = VRAM[(TileNum*16) + (bgOffsY*2) + 0];
		int vr2 = VRAM[(TileNum*16) + (bgOffsY*2) + 1];

		for (int t = bgOffsX; (t < 8) && (cnt > 0); ++t, --cnt)
			DRAWPIX(curX++, TilePal, PATLINE(t));

		while (cnt>=8) {
			TileNum = tilebufBG[bufMap++];
			TilePal = tilebufBG[bufMap++];
			vr1 = VRAM[(TileNum*16) + (bgOffsY*2) + 0];
			vr2 = VRAM[(TileNum*16) + (bgOffsY*2) + 1];
			for (int t = 0; t < 8; ++t)
				DRAWPIX(curX++, TilePal, PATLINE(t));
			cnt -= 8;
		}
		TileNum = tilebufBG[bufMap++];
		TilePal = tilebufBG[bufMap++];
		vr1 = VRAM[(TileNum*16) + (bgOffsY*2) + 0];
		vr2 = VRAM[(TileNum*16) + (bgOffsY*2) + 1];
		for (int t = 0; cnt > 0; --cnt, ++t)
			DRAWPIX(curX++, TilePal, PATLINE(t));
	}

	private static int getSpriteCountOnScanline(int i) { //NOTE: Assume max sprites/scanline == 10
		boolean spr8x16 = ((LCDC&(1<<2))!=0);
		int count = 0;
		for (int spr = 0; spr < 40; ++spr) {
			int sprY    = OAM[(spr*4) + 0];
			int sprX    = OAM[(spr*4) + 1];
			int sprNum  = OAM[(spr*4) + 2];
			int sprAttr = OAM[(spr*4) + 3];

			int ofsY = i - sprY + 16;
			//check if sprite is visible on this scanline
			if ((ofsY >= 0) && (ofsY < (spr8x16 ? 16 : 8)) &&  (sprX > 0) && (sprX < 168))
				++count;
		}
		return Math.min(count, 10);
	}

	private static void renderScanlineSprites() {
		boolean spr8x16 = ((LCDC&(1<<2))!=0);

		for (int spr = 0; spr < 40; ++spr) {
			int sprY    = OAM[(spr*4) + 0];
			int sprX    = OAM[(spr*4) + 1];
			int sprNum  = OAM[(spr*4) + 2];
			int sprAttr = OAM[(spr*4) + 3];

			int ofsY = LY - sprY + 16;

			//check if sprite is visible on this scanline
			if ((ofsY >= 0) && (ofsY < (spr8x16 ? 16 : 8))
			&&  (sprX > 0) && (sprX < 168)) {
				if ((sprAttr&(1<<6))!=0) ofsY = (spr8x16 ? 15 : 7) - ofsY;  // vert  flip
				if (spr8x16) {
					sprNum &= ~1;
					sprNum |= (ofsY >= 8) ? 1 : 0;
					ofsY &= 7;
				}

				boolean hflip = ((sprAttr&(1<<5))!=0);
				boolean prio = ((sprAttr&(1<<7))==0);

				int palnr;
				if (isCGB) {
					if ((sprAttr&(1<<3))!=0) sprNum |= (1<<9);  // bank select
					palnr = sprAttr & 7;
				} else
					palnr = (sprAttr>>4)&1;

				int vr1 = VRAM[(sprNum*16) + (ofsY*2) + 0];
				int vr2 = VRAM[(sprNum*16) + (ofsY*2) + 1];

				for (int ofsX = 0; ofsX < 8; ++ofsX) {
					int rx = sprX - 8 + ofsX;

					// 0 is transparent color
					int col = PATLINE(hflip ? 7 - ofsX : ofsX);
					if((col != 0) && (rx >= 0) && (rx < 160)
					/*&& (prio || ((blitLine[rx]&0x3c)== 0x20))*/) {
						DRAWPIX_S(rx, palnr, col);
					}
				}
			}
		}
	}
}

#endif
