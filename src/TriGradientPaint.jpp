#include "Global.inc"

import java.awt.Color;
import java.awt.Paint;
import java.awt.PaintContext;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.Transparency;
import java.awt.color.ColorSpace;
import java.awt.geom.AffineTransform;
import java.awt.geom.Rectangle2D;
import java.awt.geom.Point2D;
import java.awt.image.ColorModel;
import java.awt.image.ComponentColorModel;
import java.awt.image.DataBuffer;
import java.awt.image.Raster;
import java.awt.image.WritableRaster;

class TriGradientPaintContext implements PaintContext {
	private static final ColorModel cmodel = new ComponentColorModel(
		ColorSpace.getInstance(ColorSpace.CS_sRGB),
		new int[]{8, 8, 8},
		false, false, Transparency.OPAQUE,
		DataBuffer.TYPE_INT
	);

	private final Point[] point;
	private final Color[] color;

	/// Creates trigadientpaint obj
	public TriGradientPaintContext(Point[] points, Color[] colors) {
		ASSERT(points.length == 3);
		ASSERT(colors.length == 3);
		point = points;
		color = colors;
	}

	/// Releases the resources allocated for the operation.
	public void dispose() {
		// TODO: what should this do?
	}

	/// Returns the ColorModel of the output.
	public ColorModel getColorModel() {
		return cmodel;
	}

	/// Returns a Raster containing the colors generated for the graphics operation.
	public Raster getRaster(int x, int y, int w, int h) {
		WritableRaster wr = cmodel.createCompatibleWritableRaster(w, h);
		#define x1 (point[0].x)
		#define y1 (point[0].y)
		#define x2 (point[1].x)
		#define y2 (point[1].y)
		#define x3 (point[2].x)
		#define y3 (point[2].y)
		int[] c = new int[3];
		double md1,md2,d1,d2,px,py;
		double a1,a2,b1,b2,c1,c2,denom;

		md1 = Point2D.distance(x1, y1, x2, y2); // maximum distance along axis 1 (point 1 -> point 2)
		md2 = Point2D.distance(x1, y1, x3, y3); // maximum distance along axis 1 (point 1 -> point 3)

		// precalculate stuff used for intersection calculation that does not depend on px or py
		a1 = y2 - y1;
		b1 = x1 - x2;
		c1 = x2 * y1 - x1 * y2;

		a2 = y3 - y1;
		b2 = x1 - x3;

		denom = a1*b2 - a2*b1;
		ASSERT(denom != 0);

		for (int i = 0; i < w; ++i) {
			for (int j = 0; j < h; ++j) {
				// (px,py) is point we are currently drawing
				px = x + i;
				py = y + j;

				// (ix,iy) will be intersection of (p1->p2) and line parralel to (p1->p3) through (px,py)
				c2 = -(py * b2 + px * a2);
				double ix = (b1*c2 - b2*c1)/denom;
				double iy = (a2*c1 - a1*c2)/denom;

				d1 = Point2D.distance(x1, y1, ix, iy); // distance along axis 1
				d2 = Point2D.distance(px, py, ix, iy); // distance along axis 2

				// calculate weights of points 1..3
				int w1, w2, w3;
				w2 = (int)Math.round((256.0 * d1) / md1);
				w3 = (int)Math.round((256.0 * d2) / md2);
				w1 = 256 - w2 - w3;

				// calculate weighted average of RGB components
				c[0] = ((color[0].getRed  ()*w1) + (color[1].getRed  ()*w2) + (color[2].getRed  ()*w3)) / 256;
				c[1] = ((color[0].getGreen()*w1) + (color[1].getGreen()*w2) + (color[2].getGreen()*w3)) / 256;
				c[2] = ((color[0].getBlue ()*w1) + (color[1].getBlue ()*w2) + (color[2].getBlue ()*w3)) / 256;

				// set the pixel in the raster
				wr.setPixel(i, j, c);
			}
		}
		return wr;
		#undef x1
		#undef x2
		#undef x3
		#undef y1
		#undef y2
		#undef y3
	}
}

public class TriGradientPaint implements Paint {
	private PaintContext pcontext;

	/// Creates trigadientpaint obj
	public TriGradientPaint(Point[] points, Color[] colors) {
		if (points.length != 3) throw new IllegalArgumentException("points array must have size 3");
		if (colors.length != 3) throw new IllegalArgumentException("colors array must have size 3");
		pcontext = new TriGradientPaintContext(points, colors);
	}

	/// Creates and returns a PaintContext used to generate the color pattern.
	public PaintContext createContext(ColorModel cm, Rectangle deviceBounds, Rectangle2D userBounds, AffineTransform xform, RenderingHints hints) {
		return pcontext;
	}

	/// Returns the type of this Transparency.
	public int getTransparency() {
		return OPAQUE;
	}
}
