import javax.swing.*;
import javax.swing.event.*;
import java.awt.event.*;
import java.awt.*;

#include "Global.inc"

public class ColorSelector extends JFrame
  implements MouseListener, ChangeListener, ActionListener {

	public static final long serialVersionUID = 1;

	private JPanel pnlColor  = new JPanel();
	private JPanel pnlSelect = new JPanel();
	private JPanel pnlTest   = new JPanel();

	private String[] optionStr = {"background ", "sprites 1.", "sprites 2."};
	private ButtonGroup group = new ButtonGroup();
	private JRadioButton[] buttons = new JRadioButton[12];

	private String[] colorStr = {"Red", "Green", "Blue"};
	private JSlider[] sliders = new JSlider[3];

	private int[][][] colors = new int[3][4][3];

	private VideoController vc;
	private swinggui gui;

	public ColorSelector (swinggui gui) {
		this.vc = gui.VC;
		this.gui = gui;

		setLayout(new BorderLayout());
		setSize (450, 450);
		setResizable( false );
		addMouseListener (this);

		initSelectPanel();
		setPreferredSize(new Dimension(480, 240));
		add(pnlSelect, BorderLayout.WEST);
		initColorPanel();
		add(pnlColor, BorderLayout.CENTER);
		add(pnlTest, BorderLayout.EAST);
	}

	private void initSelectPanel() {
		pnlSelect.setLayout(new GridLayout(12, 2));

		for (int i = 0; i < 12; ++i) {
			String lblText = optionStr[(int)(i / 4)] + (i % 4 + 1);
			pnlSelect.add(new Label(lblText));

			buttons[i] = new JRadioButton();
			buttons[i].addActionListener( this );
			group.add(buttons[i]);
			pnlSelect.add(buttons[i]);
		}

		buttons[0].setSelected(true);
	}

	private void initColorPanel() {
		pnlColor.setLayout(new GridLayout(3, 3));

		for (int i = 0; i < 3; ++i) {
			sliders[i] = new JSlider(JSlider.HORIZONTAL, 0, 255, 0);
			sliders[i].addChangeListener(this);
			pnlColor.add(new JLabel(colorStr[i]));
			pnlColor.add(sliders[i]);
		}
	}

	private void setTestColor(int r, int g, int b) {
		pnlTest.setBackground(new Color(r, g, b));
	}

	public void mouseClicked (MouseEvent e) {
// 		System.out.printf("(%d, %d)\n", e.getX(), e.getY());
	}

	boolean hack=false;

	public void stateChanged(ChangeEvent e) {
		if (hack) return;
		int r = sliders[0].getValue();
		int g = sliders[1].getValue();
		int b = sliders[2].getValue();

		int selected = 0;

		for (int i = 0; i < 12; ++i) {
			if ( buttons[i].isSelected() ) {
			  colors[i/4][i%4][0] = r;
				colors[i/4][i%4][1] = g;
			  colors[i/4][i%4][2] = b;
			}
		}

		vc.setGrayShades( colors[0], colors[1], colors[2] );
		gui.saveConfig();

		setTestColor(r, g, b);
	}

	public void actionPerformed(ActionEvent e) {
		hack = true;
		for (int i = 0; i < 12; ++i) {
			if ( e.getSource().equals( buttons[i] ) ) {
				setTestColor( colors[i/4][i%4][0], colors[i/4][i%4][1], colors[i/4][i%4][2] );
				sliders[0].setValue(colors[i/4][i%4][0]);
				sliders[1].setValue(colors[i/4][i%4][1]);
				sliders[2].setValue(colors[i/4][i%4][2]);
			}
		}
		hack = false;
	}

	public void setDefault(int[][] fore, int[][] back1, int[][] back2) {
		for (int i = 0; i < 4; ++i) {
			for (int j = 0; j < 3; ++j) {
				colors[0][i][j] = fore[i][j];
				colors[1][i][j] = back1[i][j];
				colors[2][i][j] = back2[i][j];
			}
		}

		hack = true;
		for (int i = 0; i < 12; ++i) {
			sliders[0].setValue(colors[i/4][i%4][0]);
			sliders[1].setValue(colors[i/4][i%4][1]);
			sliders[2].setValue(colors[i/4][i%4][2]);
		}
		hack = false;
	}

	public void mousePressed (MouseEvent e) {}
	public void mouseReleased (MouseEvent e) {}
	public void mouseExited (MouseEvent e) {}
	public void mouseEntered (MouseEvent e) {}
}
